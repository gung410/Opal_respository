// <auto-generated />
//  This has been run on production, commented out for safety
/*
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using cxOrganization.Domain;

namespace cxOrganization.WebServiceAPI.DbMigration
{
        [DbContext(typeof(OrganizationDbContext))]
        [Migration("20190704073241_InnitOpalat6qrDatabase")]
        partial class InnitOpalat6qrDatabase
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("cxOrganization.Domain.Entities.CustomerEntity", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CustomerID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CodeName")
                        .HasColumnName("CodeName");

                    b.Property<DateTime>("Created")
                        .HasColumnName("Created");

                    b.Property<string>("CssVariables")
                        .HasColumnName("CssVariables");

                    b.Property<string>("ExtId")
                        .IsRequired()
                        .HasColumnName("ExtID")
                        .HasMaxLength(256);

                    b.Property<string>("Favicon")
                        .HasColumnName("Favicon");

                    b.Property<bool>("HasUserIntegration")
                        .HasColumnName("HasUserIntegration");

                    b.Property<int>("LanguageId")
                        .HasColumnName("LanguageID");

                    b.Property<string>("Logo")
                        .HasColumnName("Logo");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("Name")
                        .HasMaxLength(256);

                    b.Property<int>("OwnerId")
                        .HasColumnName("OwnerID");

                    b.Property<int?>("RootMenuId")
                        .HasColumnName("RootMenuID");

                    b.Property<short>("Status")
                        .HasColumnName("Status");

                    b.HasKey("CustomerId");

                    b.ToTable("Customer", "org");
                });

            modelBuilder.Entity("cxOrganization.Domain.Entities.DGDEntity", b =>
                {
                    b.Property<int>("DepartmentGroupId")
                        .HasColumnName("DepartmentGroupID");

                    b.Property<int>("DepartmentId")
                        .HasColumnName("DepartmentID");

                    b.HasKey("DepartmentGroupId", "DepartmentId");

                    b.HasIndex("DepartmentId");

                    b.ToTable("DG_D", "org");
                });

            modelBuilder.Entity("cxOrganization.Domain.Entities.DTDEntity", b =>
                {
                    b.Property<int>("DepartmentTypeId")
                        .HasColumnName("DepartmentTypeID");

                    b.Property<int>("DepartmentId")
                        .HasColumnName("DepartmentID");

                    b.HasKey("DepartmentTypeId", "DepartmentId");

                    b.HasIndex("DepartmentId");

                    b.ToTable("DT_D", "org");
                });

            modelBuilder.Entity("cxOrganization.Domain.Entities.DTUGEntity", b =>
                {
                    b.Property<int>("DepartmentTypeId")
                        .HasColumnName("DepartmentTypeID");

                    b.Property<int>("UserGroupId")
                        .HasColumnName("UserGroupID");

                    b.HasKey("DepartmentTypeId", "UserGroupId");

                    b.HasIndex("UserGroupId");

                    b.ToTable("DT_UG", "org");
                });

            modelBuilder.Entity("cxOrganization.Domain.Entities.DepartmentEntity", b =>
                {
                    b.Property<int>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DepartmentID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Adress")
                        .IsRequired()
                        .HasColumnName("Adress")
                        .HasMaxLength(512);

                    b.Property<int?>("ArchetypeId")
                        .HasColumnName("ArchetypeID");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnName("City")
                        .HasMaxLength(64);

                    b.Property<int>("CountryCode")
                        .HasColumnName("CountryCode");

                    b.Property<DateTime>("Created")
                        .HasColumnName("Created");

                    b.Property<int?>("CustomerId")
                        .HasColumnName("CustomerID");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnName("Deleted");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("Description");

                    b.Property<int?>("EntityStatusId")
                        .HasColumnName("EntityStatusID");

                    b.Property<int?>("EntityStatusReasonId")
                        .HasColumnName("EntityStatusReasonID");

                    b.Property<byte[]>("EntityVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("EntityVersion");

                    b.Property<string>("ExtId")
                        .IsRequired()
                        .HasColumnName("ExtID")
                        .HasMaxLength(256);

                    b.Property<int>("LanguageId")
                        .HasColumnName("LanguageID");

                    b.Property<DateTime>("LastSynchronized")
                        .HasColumnName("LastSynchronized");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnName("LastUpdated");

                    b.Property<int?>("LastUpdatedBy")
                        .HasColumnName("LastUpdatedBy");

                    b.Property<short>("Locked")
                        .HasColumnName("Locked");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("Name")
                        .HasMaxLength(256);

                    b.Property<string>("OrgNo")
                        .IsRequired()
                        .HasColumnName("OrgNo")
                        .HasMaxLength(16);

                    b.Property<int>("OwnerId")
                        .HasColumnName("OwnerID");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnName("PostalCode")
                        .HasMaxLength(32);

                    b.Property<string>("Tag")
                        .IsRequired()
                        .HasColumnName("Tag");

                    b.HasKey("DepartmentId");

                    b.ToTable("Department", "org");
                });

            modelBuilder.Entity("cxOrganization.Domain.Entities.DepartmentGroupEntity", b =>
                {
                    b.Property<int>("DepartmentGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DepartmentGroupID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnName("Created");

                    b.Property<string>("ExtId")
                        .IsRequired()
                        .HasColumnName("ExtID")
                        .HasMaxLength(256);

                    b.Property<short>("No")
                        .HasColumnName("No");

                    b.Property<int>("OwnerId")
                        .HasColumnName("OwnerID");

                    b.HasKey("DepartmentGroupId");

                    b.ToTable("DepartmentGroup", "org");
                });

            modelBuilder.Entity("cxOrganization.Domain.Entities.DepartmentTypeEntity", b =>
                {
                    b.Property<int>("DepartmentTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DepartmentTypeID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ArchetypeId")
                        .HasColumnName("ArchetypeID");

                    b.Property<DateTime>("Created")
                        .HasColumnName("Created");

                    b.Property<string>("ExtId")
                        .IsRequired()
                        .HasColumnName("ExtID")
                        .HasMaxLength(256);

                    b.Property<short>("No")
                        .HasColumnName("No");

                    b.Property<int>("OwnerId")
                        .HasColumnName("OwnerID");

                    b.Property<int?>("ParentId")
                        .HasColumnName("ParentID");

                    b.HasKey("DepartmentTypeId");

                    b.ToTable("DepartmentType", "org");
                });

            modelBuilder.Entity("cxOrganization.Domain.Entities.HierarchyDepartmentEntity", b =>
                {
                    b.Property<int>("HDId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("HDID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnName("Created");

                    b.Property<short>("Deleted")
                        .HasColumnName("Deleted");

                    b.Property<int>("DepartmentId")
                        .HasColumnName("DepartmentID");

                    b.Property<int>("HierarchyId")
                        .HasColumnName("HierarchyID");

                    b.Property<int?>("ParentId")
                        .HasColumnName("ParentID");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnName("Path")
                        .HasMaxLength(900);

                    b.Property<string>("PathName")
                        .IsRequired()
                        .HasColumnName("PathName")
                        .HasMaxLength(4000);

                    b.HasKey("HDId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("HierarchyId");

                    b.HasIndex("ParentId");

                    b.ToTable("H_D", "org");
                });

            modelBuilder.Entity("cxOrganization.Domain.Entities.HierarchyEntity", b =>
                {
                    b.Property<int>("HierarchyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("HierarchyID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnName("Created");

                    b.Property<bool>("Deleted")
                        .HasColumnName("Deleted");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("Description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("Name")
                        .HasMaxLength(256);

                    b.Property<int>("OwnerId")
                        .HasColumnName("OwnerID");

                    b.Property<short>("Type")
                        .HasColumnName("Type");

                    b.HasKey("HierarchyId");

                    b.ToTable("Hierarchy", "org");
                });

            modelBuilder.Entity("cxOrganization.Domain.Entities.LanguageEntity", b =>
                {
                    b.Property<int>("LanguageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("LanguageID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnName("Created");

                    b.Property<string>("Dir")
                        .IsRequired()
                        .HasColumnName("Dir")
                        .HasMaxLength(3);

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasColumnName("LanguageCode")
                        .HasMaxLength(5);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("Name")
                        .HasMaxLength(64);

                    b.Property<string>("NativeName")
                        .IsRequired()
                        .HasColumnName("NativeName")
                        .HasMaxLength(64);

                    b.HasKey("LanguageId");

                    b.ToTable("Language", "dbo");
                });

            modelBuilder.Entity("cxOrganization.Domain.Entities.LoginServiceEntity", b =>
                {
                    b.Property<int>("LoginServiceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("LoginServiceID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Authority")
                        .HasColumnName("Authority")
                        .HasMaxLength(512);

                    b.Property<string>("ClientId")
                        .HasColumnName("ClientId")
                        .HasMaxLength(512);

                    b.Property<string>("ClientSecret")
                        .HasColumnName("ClientSecret")
                        .HasMaxLength(512);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnName("CreatedDate");

                    b.Property<bool>("Disabled")
                        .HasColumnName("Disabled");

                    b.Property<string>("IconUrl")
                        .HasColumnName("IconUrl")
                        .HasMaxLength(512);

                    b.Property<int?>("LoginServiceType")
                        .HasColumnName("LoginServiceType");

                    b.Property<string>("MetadataAddress")
                        .HasColumnName("MetadataAddress")
                        .HasMaxLength(512);

                    b.Property<string>("PostLogoutUri")
                        .HasColumnName("PostLogoutUri")
                        .HasMaxLength(512);

                    b.Property<string>("PrimaryClaimType")
                        .IsRequired()
                        .HasColumnName("PrimaryClaimType")
                        .HasMaxLength(512);

                    b.Property<string>("RedirectUri")
                        .HasColumnName("RedirectUri")
                        .HasMaxLength(512);

                    b.Property<string>("ResponseType")
                        .HasColumnName("ResponseType")
                        .HasMaxLength(512);

                    b.Property<string>("Scope")
                        .HasColumnName("Scope")
                        .HasMaxLength(512);

                    b.Property<string>("SecondaryClaimType")
                        .IsRequired()
                        .HasColumnName("SecondaryClaimType")
                        .HasMaxLength(512);

                    b.Property<int?>("SiteID")
                        .HasColumnName("SiteID");

                    b.HasKey("LoginServiceID");

                    b.ToTable("LoginService", "app");
                });

            modelBuilder.Entity("cxOrganization.Domain.Entities.LoginServiceUserEntity", b =>
                {
                    b.Property<int>("LoginServiceId")
                        .HasColumnName("LoginServiceID");

                    b.Property<int>("UserId")
                        .HasColumnName("UserID");

                    b.Property<DateTime>("Created")
                        .HasColumnName("Created");

                    b.Property<string>("PrimaryClaimValue")
                        .IsRequired()
                        .HasColumnName("PrimaryClaimValue")
                        .HasMaxLength(512);

                    b.HasKey("LoginServiceId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("LoginService_User", "app");
                });

            modelBuilder.Entity("cxOrganization.Domain.Entities.LtDepartmentGroup", b =>
                {
                    b.Property<int>("LanguageId")
                        .HasColumnName("LanguageID");

                    b.Property<int>("DepartmentGroupId")
                        .HasColumnName("DepartmentGroupID");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("Description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("Name")
                        .HasMaxLength(256);

                    b.HasKey("LanguageId", "DepartmentGroupId");

                    b.HasIndex("DepartmentGroupId");

                    b.ToTable("LT_DepartmentGroup", "org");
                });

            modelBuilder.Entity("cxOrganization.Domain.Entities.LtDepartmentTypeEntity", b =>
                {
                    b.Property<int>("LanguageId")
                        .HasColumnName("LanguageID");

                    b.Property<int>("DepartmentTypeId")
                        .HasColumnName("DepartmentTypeID");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("Description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("Name")
                        .HasMaxLength(256);

                    b.HasKey("LanguageId", "DepartmentTypeId");

                    b.HasIndex("DepartmentTypeId");

                    b.ToTable("LT_DepartmentType", "org");
                });

            modelBuilder.Entity("cxOrganization.Domain.Entities.LtLoginService", b =>
                {
                    b.Property<int>("LanguageId")
                        .HasColumnName("LanguageID");

                    b.Property<int>("LoginServiceId")
                        .HasColumnName("LoginServiceID");

                    b.Property<string>("Description")
                        .HasColumnName("Description");

                    b.Property<string>("Name")
                        .HasColumnName("Name")
                        .HasMaxLength(256);

                    b.Property<string>("ToolTip")
                        .HasColumnName("ToolTip")
                        .HasMaxLength(512);

                    b.HasKey("LanguageId", "LoginServiceId");

                    b.HasIndex("LoginServiceId");

                    b.ToTable("LT_LoginService", "app");
                });

            modelBuilder.Entity("cxOrganization.Domain.Entities.LtMemberRoleEntity", b =>
                {
                    b.Property<int>("LanguageId")
                        .HasColumnName("LanguageID");

                    b.Property<int>("MemberRoleId")
                        .HasColumnName("MemberRoleID");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("Description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("Name")
                        .HasMaxLength(256);

                    b.HasKey("LanguageId", "MemberRoleId");

                    b.HasIndex("MemberRoleId");

                    b.ToTable("LT_MemberRole", "org");
                });

            modelBuilder.Entity("cxOrganization.Domain.Entities.LtPeriodEntity", b =>
                {
                    b.Property<int>("LanguageId")
                        .HasColumnName("LanguageID");

                    b.Property<int>("PeriodId")
                        .HasColumnName("PeriodID");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("Description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("Name")
                        .HasMaxLength(256);

                    b.HasKey("LanguageId", "PeriodId");

                    b.HasIndex("PeriodId");

                    b.ToTable("LT_Period", "at");
                });

            modelBuilder.Entity("cxOrganization.Domain.Entities.LtPropOptionEntity", b =>
                {
                    b.Property<int>("LanguageId")
                        .HasColumnName("LanguageID");

                    b.Property<int>("PropOptionId")
                        .HasColumnName("PropOptionID");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("Description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("Name")
                        .HasMaxLength(256);

                    b.HasKey("LanguageId", "PropOptionId");

                    b.HasIndex("PropOptionId");

                    b.ToTable("LT_PropOption", "prop");
                });

            modelBuilder.Entity("cxOrganization.Domain.Entities.LtPropertyEntity", b =>
                {
                    b.Property<int>("LanguageId")
                        .HasColumnName("LanguageID");

                    b.Property<int>("PropertyId")
                        .HasColumnName("PropertyID");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("Description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("Name")
                        .HasMaxLength(256);

                    b.HasKey("LanguageId", "PropertyId");

                    b.HasIndex("PropertyId");

                    b.ToTable("LT_Prop", "prop");
                });

            modelBuilder.Entity("cxOrganization.Domain.Entities.LtUserGroupTypeEntity", b =>
                {
                    b.Property<int>("LanguageId")
                        .HasColumnName("LanguageID");

                    b.Property<int>("UserGroupTypeId")
                        .HasColumnName("UserGroupTypeID");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("Description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("Name")
                        .HasMaxLength(256);

                    b.HasKey("LanguageId", "UserGroupTypeId");

                    b.HasIndex("UserGroupTypeId");

                    b.ToTable("LT_UserGroupType", "org");
                });

            modelBuilder.Entity("cxOrganization.Domain.Entities.LtUserTypeEntity", b =>
                {
                    b.Property<int>("LanguageId")
                        .HasColumnName("LanguageID");

                    b.Property<int>("UserTypeId")
                        .HasColumnName("UserTypeID");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("Description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("Name")
                        .HasMaxLength(256);

                    b.HasKey("LanguageId", "UserTypeId");

                    b.HasIndex("UserTypeId");

                    b.ToTable("LT_UserType", "org");
                });

            modelBuilder.Entity("cxOrganization.Domain.Entities.MemberRoleEntity", b =>
                {
                    b.Property<int>("MemberRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MemberRoleID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CodeName")
                        .HasColumnName("CodeName");

                    b.Property<DateTime>("Created")
                        .HasColumnName("Created");

                    b.Property<int?>("EntityStatusId")
                        .HasColumnName("EntityStatusID");

                    b.Property<int?>("EntityStatusReasonId")
                        .HasColumnName("EntityStatusReasonID");

                    b.Property<string>("ExtId")
                        .IsRequired()
                        .HasColumnName("ExtID")
                        .HasMaxLength(256);

                    b.Property<int>("No")
                        .HasColumnName("No");

                    b.Property<int>("OwnerId")
                        .HasColumnName("OwnerID");

                    b.HasKey("MemberRoleId");

                    b.ToTable("MemberRole", "org");
                });

            modelBuilder.Entity("cxOrganization.Domain.Entities.OwnerEntity", b =>
                {
                    b.Property<int>("OwnerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OwnerID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnName("Created");

                    b.Property<string>("Css")
                        .IsRequired()
                        .HasColumnName("Css")
                        .HasMaxLength(128);

                    b.Property<int>("DefaultHashMethod")
                        .HasColumnName("DefaultHashMethod");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("Description");

                    b.Property<int>("LanguageId")
                        .HasColumnName("LanguageID");

                    b.Property<short>("Logging")
                        .HasColumnName("Logging");

                    b.Property<int>("LoginType")
                        .HasColumnName("LoginType");

                    b.Property<int?>("MainHierarchyId")
                        .HasColumnName("MainHierarchyID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("Name")
                        .HasMaxLength(256);

                    b.Property<string>("OLAPDB")
                        .IsRequired()
                        .HasColumnName("OLAPDB")
                        .HasMaxLength(64);

                    b.Property<string>("OLAPServer")
                        .IsRequired()
                        .HasColumnName("OLAPServer")
                        .HasMaxLength(64);

                    b.Property<bool>("OTPAllowLowercase")
                        .HasColumnName("OTPAllowLowercase");

                    b.Property<bool>("OTPAllowUppercase")
                        .HasColumnName("OTPAllowUppercase");

                    b.Property<string>("OTPCharacters")
                        .HasColumnName("OTPCharacters");

                    b.Property<int>("OTPDuration")
                        .HasColumnName("OTPDuration");

                    b.Property<int>("OTPLength")
                        .HasColumnName("OTPLength");

                    b.Property<string>("Prefix")
                        .IsRequired()
                        .HasColumnName("Prefix")
                        .HasMaxLength(8);

                    b.Property<string>("ReportDB")
                        .IsRequired()
                        .HasColumnName("ReportDB")
                        .HasMaxLength(64);

                    b.Property<string>("ReportServer")
                        .IsRequired()
                        .HasColumnName("ReportServer")
                        .HasMaxLength(64);

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnName("Url")
                        .HasMaxLength(128);

                    b.Property<short>("UseHashPassword")
                        .HasColumnName("UseHashPassword");

                    b.Property<bool>("UseOTP")
                        .HasColumnName("UseOTP");

                    b.Property<bool>("UseOTPCaseSensitive")
                        .HasColumnName("UseOTPCaseSensitive");

                    b.HasKey("OwnerId");

                    b.ToTable("Owner", "org");
                });

            modelBuilder.Entity("cxOrganization.Domain.Entities.PeriodEntity", b =>
                {
                    b.Property<int>("PeriodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PeriodID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnName("Created");

                    b.Property<DateTime?>("Enddate")
                        .HasColumnName("Enddate");

                    b.Property<string>("ExtId")
                        .IsRequired()
                        .HasColumnName("ExtID")
                        .HasMaxLength(256);

                    b.Property<short>("No")
                        .HasColumnName("No");

                    b.Property<int>("OwnerId")
                        .HasColumnName("OwnerID");

                    b.Property<DateTime?>("Startdate")
                        .HasColumnName("Startdate");

                    b.HasKey("PeriodId");

                    b.ToTable("Period", "at");
                });

            modelBuilder.Entity("cxOrganization.Domain.Entities.PropOptionEntity", b =>
                {
                    b.Property<int>("PropOptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PropOptionID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PropertyId")
                        .HasColumnName("PropertyID");

                    b.Property<double>("Value")
                        .HasColumnName("Value");

                    b.HasKey("PropOptionId");

                    b.ToTable("PropOption", "prop");
                });

            modelBuilder.Entity("cxOrganization.Domain.Entities.PropPageEntity", b =>
                {
                    b.Property<int>("PropPageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PropPageID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnName("Created");

                    b.Property<short>("No")
                        .HasColumnName("No");

                    b.Property<short>("TableTypeId")
                        .HasColumnName("TableTypeID");

                    b.Property<short>("Type")
                        .HasColumnName("Type");

                    b.HasKey("PropPageId");

                    b.ToTable("PropPage", "prop");
                });

            modelBuilder.Entity("cxOrganization.Domain.Entities.PropValueEntity", b =>
                {
                    b.Property<int>("PropValueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PropValueID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnName("Created");

                    b.Property<int?>("CreatedBy")
                        .HasColumnName("CreatedBy");

                    b.Property<int?>("CustomerId")
                        .HasColumnName("CustomerID");

                    b.Property<int>("ItemId")
                        .HasColumnName("ItemID");

                    b.Property<short>("No")
                        .HasColumnName("No");

                    b.Property<int?>("PropFileId")
                        .HasColumnName("PropFileID");

                    b.Property<int?>("PropOptionId")
                        .HasColumnName("PropOptionID");

                    b.Property<int>("PropertyId")
                        .HasColumnName("PropertyID");

                    b.Property<DateTime>("Updated")
                        .HasColumnName("Updated");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnName("UpdatedBy");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnName("Value");

                    b.HasKey("PropValueId");

                    b.ToTable("PropValue", "prop");
                });

            modelBuilder.Entity("cxOrganization.Domain.Entities.PropertyEntity", b =>
                {
                    b.Property<int>("PropertyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PropertyID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FormatString")
                        .IsRequired()
                        .HasColumnName("FormatString")
                        .HasMaxLength(50);

                    b.Property<bool>("MultiValue")
                        .HasColumnName("MultiValue");

                    b.Property<short>("No")
                        .HasColumnName("No");

                    b.Property<int>("PropPageId")
                        .HasColumnName("PropPageID");

                    b.Property<short>("Type")
                        .HasColumnName("Type");

                    b.Property<short>("ValueType")
                        .HasColumnName("ValueType");

                    b.HasKey("PropertyId");

                    b.HasIndex("PropPageId");

                    b.ToTable("Prop", "prop");
                });

            modelBuilder.Entity("cxOrganization.Domain.Entities.SiteParameterEntity", b =>
                {
                    b.Property<int>("SiteParameterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SiteParameterID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnName("Created");

                    b.Property<string>("GroupName")
                        .HasColumnName("GroupName");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnName("Key")
                        .HasMaxLength(256);

                    b.Property<int>("SiteId")
                        .HasColumnName("SiteID");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnName("Value")
                        .HasMaxLength(256);

                    b.HasKey("SiteParameterId");

                    b.ToTable("SiteParameter", "app");
                });

            modelBuilder.Entity("cxOrganization.Domain.Entities.UDUTEntity", b =>
                {
                    b.Property<int>("U_DId")
                        .HasColumnName("U_DID");

                    b.Property<int>("UsertypeId")
                        .HasColumnName("UsertypeID");

                    b.HasKey("U_DId", "UsertypeId");

                    b.HasIndex("UsertypeId");

                    b.ToTable("U_D_UT", "org");
                });

            modelBuilder.Entity("cxOrganization.Domain.Entities.UGMemberEntity", b =>
                {
                    b.Property<long>("UGMemberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UGMemberID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Created")
                        .HasColumnName("Created");

                    b.Property<int?>("CreatedBy")
                        .HasColumnName("CreatedBy");

                    b.Property<int?>("CustomerId")
                        .HasColumnName("CustomerID");

                    b.Property<DateTime?>("Deleted");

                    b.Property<string>("DisplayName")
                        .HasColumnName("DisplayName");

                    b.Property<int?>("EntityStatusId")
                        .HasColumnName("EntityStatusID");

                    b.Property<int?>("EntityStatusReasonId")
                        .HasColumnName("EntityStatusReasonID");

                    b.Property<byte[]>("EntityVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("EntityVersion");

                    b.Property<string>("ExtId")
                        .HasColumnName("ExtID");

                    b.Property<DateTime?>("LastSynchronized")
                        .HasColumnName("LastSynchronized");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnName("LastUpdated");

                    b.Property<int?>("LastUpdatedBy")
                        .HasColumnName("LastUpdatedBy");

                    b.Property<int?>("MemberRoleId")
                        .HasColumnName("MemberRoleID");

                    b.Property<int?>("PeriodId")
                        .HasColumnName("PeriodID");

                    b.Property<int?>("ReferrerArchetypeId")
                        .HasColumnName("ReferrerArchetypeID");

                    b.Property<string>("ReferrerResource")
                        .HasColumnName("ReferrerResource");

                    b.Property<string>("ReferrerToken")
                        .HasColumnName("ReferrerToken");

                    b.Property<int>("UserGroupId")
                        .HasColumnName("UserGroupID");

                    b.Property<int?>("UserId")
                        .HasColumnName("UserID");

                    b.Property<DateTime?>("ValidTo")
                        .HasColumnName("ValidTo");

                    b.Property<DateTime?>("validFrom")
                        .HasColumnName("validFrom");

                    b.HasKey("UGMemberId");

                    b.HasIndex("MemberRoleId");

                    b.HasIndex("UserGroupId");

                    b.HasIndex("UserId");

                    b.ToTable("UGMember", "org");
                });

            modelBuilder.Entity("cxOrganization.Domain.Entities.UTUEntity", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnName("UserID");

                    b.Property<int>("UserTypeId")
                        .HasColumnName("UserTypeID");

                    b.HasKey("UserId", "UserTypeId");

                    b.HasIndex("UserTypeId");

                    b.ToTable("UT_U", "org");
                });

            modelBuilder.Entity("cxOrganization.Domain.Entities.UserDepartmentEntity", b =>
                {
                    b.Property<int>("U_DId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("U_DID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnName("Created");

                    b.Property<int>("DepartmentId")
                        .HasColumnName("DepartmentID");

                    b.Property<bool>("Selected")
                        .HasColumnName("Selected");

                    b.Property<int>("UserId")
                        .HasColumnName("UserID");

                    b.HasKey("U_DId");

                    b.HasIndex("UserId");

                    b.ToTable("U_D", "org");
                });

            modelBuilder.Entity("cxOrganization.Domain.Entities.UserEntity", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UserID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ArchetypeId")
                        .HasColumnName("ArchetypeID");

                    b.Property<bool>("ChangePassword")
                        .HasColumnName("ChangePassword");

                    b.Property<int?>("CountryCode")
                        .HasColumnName("CountryCode");

                    b.Property<DateTime>("Created")
                        .HasColumnName("Created");

                    b.Property<int?>("CustomerId")
                        .HasColumnName("CustomerID");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnName("DateOfBirth");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnName("Deleted");

                    b.Property<int>("DepartmentId")
                        .HasColumnName("DepartmentID");

                    b.Property<string>("DynamicAttributes")
                        .HasColumnName("DynamicAttributes");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnName("Email")
                        .HasMaxLength(256);

                    b.Property<DateTime?>("EntityExpirationDate")
                        .HasColumnName("EntityExpirationDate");

                    b.Property<int?>("EntityStatusId")
                        .HasColumnName("EntityStatusID");

                    b.Property<int?>("EntityStatusReasonId")
                        .HasColumnName("EntityStatusReasonID");

                    b.Property<byte[]>("EntityVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("EntityVersion");

                    b.Property<string>("ExtId")
                        .IsRequired()
                        .HasColumnName("ExtID")
                        .HasMaxLength(256);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnName("FirstName")
                        .HasMaxLength(64);

                    b.Property<bool>("ForceUserLoginAgain")
                        .HasColumnName("ForceUserLoginAgain");

                    b.Property<short?>("Gender")
                        .HasColumnName("Gender");

                    b.Property<string>("HashPassword")
                        .IsRequired()
                        .HasColumnName("HashPassword")
                        .HasMaxLength(128);

                    b.Property<int>("LanguageId")
                        .HasColumnName("LanguageID");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnName("LastName")
                        .HasMaxLength(64);

                    b.Property<DateTime>("LastSynchronized")
                        .HasColumnName("LastSynchronized");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnName("LastUpdated");

                    b.Property<int?>("LastUpdatedBy")
                        .HasColumnName("LastUpdatedBy");

                    b.Property<short>("Locked")
                        .HasColumnName("Locked");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasColumnName("Mobile")
                        .HasMaxLength(16);

                    b.Property<DateTime?>("OTPExpireTime")
                        .HasColumnName("OTPExpireTime");

                    b.Property<string>("OneTimePassword")
                        .IsRequired()
                        .HasColumnName("OneTimePassword")
                        .HasMaxLength(64);

                    b.Property<int>("OwnerId")
                        .HasColumnName("OwnerID");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnName("Password")
                        .HasMaxLength(64);

                    b.Property<int?>("RoleId")
                        .HasColumnName("RoleID");

                    b.Property<string>("SSN")
                        .IsRequired()
                        .HasColumnName("SSN")
                        .HasMaxLength(64);

                    b.Property<string>("SaltPassword")
                        .IsRequired()
                        .HasColumnName("SaltPassword")
                        .HasMaxLength(64);

                    b.Property<string>("Tag")
                        .IsRequired()
                        .HasColumnName("Tag")
                        .HasMaxLength(128);

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnName("UserName")
                        .HasMaxLength(128);

                    b.HasKey("UserId");

                    b.HasIndex("DepartmentId");

                    b.ToTable("User", "org");
                });

            modelBuilder.Entity("cxOrganization.Domain.Entities.UserGroupEntity", b =>
                {
                    b.Property<int>("UserGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UserGroupID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ArchetypeId")
                        .HasColumnName("ArchetypeID");

                    b.Property<DateTime>("Created")
                        .HasColumnName("Created");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnName("Deleted");

                    b.Property<int?>("DepartmentId")
                        .HasColumnName("DepartmentID");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("Description");

                    b.Property<int?>("EntityStatusId")
                        .HasColumnName("EntityStatusID");

                    b.Property<int?>("EntityStatusReasonId")
                        .HasColumnName("EntityStatusReasonID");

                    b.Property<byte[]>("EntityVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("EntityVersion");

                    b.Property<string>("ExtId")
                        .IsRequired()
                        .HasColumnName("ExtID")
                        .HasMaxLength(256);

                    b.Property<DateTime>("LastSynchronized")
                        .HasColumnName("LastSynchronized");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnName("LastUpdated");

                    b.Property<int?>("LastUpdatedBy")
                        .HasColumnName("LastUpdatedBy");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("Name")
                        .HasMaxLength(256);

                    b.Property<int>("OwnerId")
                        .HasColumnName("OwnerID");

                    b.Property<int?>("PeriodId")
                        .HasColumnName("PeriodID");

                    b.Property<int?>("ReferrerArchetypeId")
                        .HasColumnName("ReferrerArchetypeID");

                    b.Property<string>("ReferrerResource")
                        .HasColumnName("ReferrerResource");

                    b.Property<string>("ReferrerToken")
                        .HasColumnName("ReferrerToken");

                    b.Property<int?>("SurveyId")
                        .HasColumnName("SurveyID");

                    b.Property<string>("Tag")
                        .IsRequired()
                        .HasColumnName("Tag");

                    b.Property<int?>("UserGroupTypeId");

                    b.Property<int?>("UserId")
                        .HasColumnName("UserID");

                    b.HasKey("UserGroupId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("UserId");

                    b.ToTable("UserGroup", "org");
                });

            modelBuilder.Entity("cxOrganization.Domain.Entities.UserGroupTypeEntity", b =>
                {
                    b.Property<int>("UserGroupTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UserGroupTypeID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnName("Created");

                    b.Property<string>("ExtId")
                        .IsRequired()
                        .HasColumnName("ExtID")
                        .HasMaxLength(256);

                    b.Property<short>("No")
                        .HasColumnName("No");

                    b.Property<int>("OwnerId")
                        .HasColumnName("OwnerID");

                    b.HasKey("UserGroupTypeId");

                    b.ToTable("UserGroupType", "org");
                });

            modelBuilder.Entity("cxOrganization.Domain.Entities.UserTypeEntity", b =>
                {
                    b.Property<int>("UserTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UserTypeID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ArchetypeId")
                        .HasColumnName("ArchetypeID");

                    b.Property<DateTime>("Created")
                        .HasColumnName("Created");

                    b.Property<string>("ExtId")
                        .IsRequired()
                        .HasColumnName("ExtID")
                        .HasMaxLength(256);

                    b.Property<short>("No")
                        .HasColumnName("No");

                    b.Property<int>("OwnerId")
                        .HasColumnName("OwnerID");

                    b.Property<int?>("ParentId")
                        .HasColumnName("ParentID");

                    b.HasKey("UserTypeId");

                    b.ToTable("UserType", "org");
                });

            modelBuilder.Entity("cxOrganization.Domain.Entities.DGDEntity", b =>
                {
                    b.HasOne("cxOrganization.Domain.Entities.DepartmentGroupEntity", "DepartmentGroup")
                        .WithMany("DG_Ds")
                        .HasForeignKey("DepartmentGroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("cxOrganization.Domain.Entities.DepartmentEntity", "Department")
                        .WithMany("DG_Ds")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("cxOrganization.Domain.Entities.DTDEntity", b =>
                {
                    b.HasOne("cxOrganization.Domain.Entities.DepartmentEntity", "Department")
                        .WithMany("DT_Ds")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("cxOrganization.Domain.Entities.DepartmentTypeEntity", "DepartmentType")
                        .WithMany("DT_Ds")
                        .HasForeignKey("DepartmentTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("cxOrganization.Domain.Entities.DTUGEntity", b =>
                {
                    b.HasOne("cxOrganization.Domain.Entities.DepartmentTypeEntity", "DepartmentType")
                        .WithMany("DT_UGs")
                        .HasForeignKey("DepartmentTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("cxOrganization.Domain.Entities.UserGroupEntity", "UserGroup")
                        .WithMany("DT_UGs")
                        .HasForeignKey("UserGroupId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("cxOrganization.Domain.Entities.HierarchyDepartmentEntity", b =>
                {
                    b.HasOne("cxOrganization.Domain.Entities.DepartmentEntity", "Department")
                        .WithMany("H_D")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("cxOrganization.Domain.Entities.HierarchyEntity", "Hierarchy")
                        .WithMany("H_Ds")
                        .HasForeignKey("HierarchyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("cxOrganization.Domain.Entities.HierarchyDepartmentEntity", "Parent")
                        .WithMany("H_Ds")
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("cxOrganization.Domain.Entities.LoginServiceUserEntity", b =>
                {
                    b.HasOne("cxOrganization.Domain.Entities.LoginServiceEntity", "LoginService")
                        .WithMany()
                        .HasForeignKey("LoginServiceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("cxOrganization.Domain.Entities.UserEntity", "User")
                        .WithMany("LoginServiceUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("cxOrganization.Domain.Entities.LtDepartmentGroup", b =>
                {
                    b.HasOne("cxOrganization.Domain.Entities.DepartmentGroupEntity", "DepartmentGroup")
                        .WithMany("LT_DepartmentGroup")
                        .HasForeignKey("DepartmentGroupId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("cxOrganization.Domain.Entities.LtDepartmentTypeEntity", b =>
                {
                    b.HasOne("cxOrganization.Domain.Entities.DepartmentTypeEntity", "DepartmentType")
                        .WithMany("LT_DepartmentType")
                        .HasForeignKey("DepartmentTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("cxOrganization.Domain.Entities.LtLoginService", b =>
                {
                    b.HasOne("cxOrganization.Domain.Entities.LoginServiceEntity", "LoginServiceEntity")
                        .WithMany("LT_LoginServices")
                        .HasForeignKey("LoginServiceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("cxOrganization.Domain.Entities.LtMemberRoleEntity", b =>
                {
                    b.HasOne("cxOrganization.Domain.Entities.MemberRoleEntity", "MemberRole")
                        .WithMany("LT_MemberRoles")
                        .HasForeignKey("MemberRoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("cxOrganization.Domain.Entities.LtPeriodEntity", b =>
                {
                    b.HasOne("cxOrganization.Domain.Entities.PeriodEntity", "Period")
                        .WithMany("LtPeriods")
                        .HasForeignKey("PeriodId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("cxOrganization.Domain.Entities.LtPropOptionEntity", b =>
                {
                    b.HasOne("cxOrganization.Domain.Entities.PropOptionEntity", "PropOption")
                        .WithMany("LtPropOptions")
                        .HasForeignKey("PropOptionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("cxOrganization.Domain.Entities.LtPropertyEntity", b =>
                {
                    b.HasOne("cxOrganization.Domain.Entities.PropertyEntity", "Property")
                        .WithMany("LtProperties")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("cxOrganization.Domain.Entities.LtUserGroupTypeEntity", b =>
                {
                    b.HasOne("cxOrganization.Domain.Entities.UserGroupTypeEntity", "UserGroupType")
                        .WithMany("LT_UserGroupType")
                        .HasForeignKey("UserGroupTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("cxOrganization.Domain.Entities.LtUserTypeEntity", b =>
                {
                    b.HasOne("cxOrganization.Domain.Entities.UserTypeEntity", "UserType")
                        .WithMany("LT_UserType")
                        .HasForeignKey("UserTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("cxOrganization.Domain.Entities.PropertyEntity", b =>
                {
                    b.HasOne("cxOrganization.Domain.Entities.PropPageEntity", "PropPage")
                        .WithMany("Properties")
                        .HasForeignKey("PropPageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("cxOrganization.Domain.Entities.UDUTEntity", b =>
                {
                    b.HasOne("cxOrganization.Domain.Entities.UserDepartmentEntity", "UserDepartment")
                        .WithMany("U_D_UTs")
                        .HasForeignKey("U_DId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("cxOrganization.Domain.Entities.UserTypeEntity", "UserType")
                        .WithMany("U_D_UTs")
                        .HasForeignKey("UsertypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("cxOrganization.Domain.Entities.UGMemberEntity", b =>
                {
                    b.HasOne("cxOrganization.Domain.Entities.MemberRoleEntity", "MemberRole")
                        .WithMany("UGMembers")
                        .HasForeignKey("MemberRoleId");

                    b.HasOne("cxOrganization.Domain.Entities.UserGroupEntity", "UserGroup")
                        .WithMany("UGMembers")
                        .HasForeignKey("UserGroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("cxOrganization.Domain.Entities.UserEntity", "User")
                        .WithMany("UGMembers")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("cxOrganization.Domain.Entities.UTUEntity", b =>
                {
                    b.HasOne("cxOrganization.Domain.Entities.UserEntity", "User")
                        .WithMany("UT_Us")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("cxOrganization.Domain.Entities.UserTypeEntity", "UserType")
                        .WithMany("UT_Us")
                        .HasForeignKey("UserTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("cxOrganization.Domain.Entities.UserDepartmentEntity", b =>
                {
                    b.HasOne("cxOrganization.Domain.Entities.UserEntity", "User")
                        .WithMany("U_D")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("cxOrganization.Domain.Entities.UserEntity", b =>
                {
                    b.HasOne("cxOrganization.Domain.Entities.DepartmentEntity", "Department")
                        .WithMany("Users")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("cxOrganization.Domain.Entities.UserGroupEntity", b =>
                {
                    b.HasOne("cxOrganization.Domain.Entities.DepartmentEntity", "Department")
                        .WithMany("UserGroups")
                        .HasForeignKey("DepartmentId");

                    b.HasOne("cxOrganization.Domain.Entities.UserEntity", "User")
                        .WithMany("UserGroups")
                        .HasForeignKey("UserId");
                });
#pragma warning restore 612, 618
        }
    }
}
*/
