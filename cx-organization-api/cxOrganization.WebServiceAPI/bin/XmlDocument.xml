<?xml version="1.0"?>
<doc>
    <assembly>
        <name>cxOrganization.WebServiceAPI</name>
    </assembly>
    <members>
        <member name="P:cxOrganization.WebServiceAPI.Configuration.ConnectionTypeConfigCollection.Item(System.Int32)">
            <summary>
              Gets the ConnectionConfigElement at the specified index location.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:cxOrganization.WebServiceAPI.Configuration.ConnectionTypeConfigCollection.Item(cxOrganization.Business.Connection.ConnectionType)">
            <summary>
              Gets the ConnectionConfigElement at the specified index location.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="P:cxOrganization.WebServiceAPI.Configuration.ConnectionEventTypeConfigCollection.Item(System.Int32)">
            <summary>
              Gets the ConnectionEventTypeConfigElement at the specified index location.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:cxOrganization.WebServiceAPI.Configuration.ConnectionEventTypeConfigCollection.Item(System.Object)">
            <summary>
              Gets the ConnectionEventTypeConfigElement at the specified index location.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:cxOrganization.WebServiceAPI.WebApiConfig">
            <summary>
            Used by IIS when starting Webapi
            </summary>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Areas.HelpPage.ApiDescriptionExtensions.GetFriendlyId(System.Web.Http.Description.ApiDescription)">
            <summary>
            Generates an URI-friendly ID for the <see cref="T:System.Web.Http.Description.ApiDescription"/>. E.g. "Get-Values-id_name" instead of "GetValues/{id}?name={name}"
            </summary>
            <param name="description">The <see cref="T:System.Web.Http.Description.ApiDescription"/>.</param>
            <returns>The ID as a string.</returns>
        </member>
        <member name="T:cxOrganization.WebServiceAPI.Areas.HelpPage.HelpPageConfig">
            <summary>
            Use this class to customize the Help Page.
            For example you can set a custom <see cref="T:System.Web.Http.Description.IDocumentationProvider"/> to supply the documentation
            or you can provide the samples for the requests/responses.
            </summary>
        </member>
        <member name="T:cxOrganization.WebServiceAPI.Areas.HelpPage.Controllers.HelpController">
            <summary>
            The controller that will handle requests for the help page.
            </summary>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Areas.HelpPage.HelpPageConfigurationExtensions.SetDocumentationProvider(System.Web.Http.HttpConfiguration,System.Web.Http.Description.IDocumentationProvider)">
            <summary>
            Sets the documentation provider for help page.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="documentationProvider">The documentation provider.</param>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Areas.HelpPage.HelpPageConfigurationExtensions.SetSampleObjects(System.Web.Http.HttpConfiguration,System.Collections.Generic.IDictionary{System.Type,System.Object})">
            <summary>
            Sets the objects that will be used by the formatters to produce sample requests/responses.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="sampleObjects">The sample objects.</param>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Areas.HelpPage.HelpPageConfigurationExtensions.SetSampleRequest(System.Web.Http.HttpConfiguration,System.Object,System.Net.Http.Headers.MediaTypeHeaderValue,System.String,System.String)">
            <summary>
            Sets the sample request directly for the specified media type and action.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="sample">The sample request.</param>
            <param name="mediaType">The media type.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Areas.HelpPage.HelpPageConfigurationExtensions.SetSampleRequest(System.Web.Http.HttpConfiguration,System.Object,System.Net.Http.Headers.MediaTypeHeaderValue,System.String,System.String,System.String[])">
            <summary>
            Sets the sample request directly for the specified media type and action with parameters.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="sample">The sample request.</param>
            <param name="mediaType">The media type.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
            <param name="parameterNames">The parameter names.</param>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Areas.HelpPage.HelpPageConfigurationExtensions.SetSampleResponse(System.Web.Http.HttpConfiguration,System.Object,System.Net.Http.Headers.MediaTypeHeaderValue,System.String,System.String)">
            <summary>
            Sets the sample request directly for the specified media type of the action.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="sample">The sample response.</param>
            <param name="mediaType">The media type.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Areas.HelpPage.HelpPageConfigurationExtensions.SetSampleResponse(System.Web.Http.HttpConfiguration,System.Object,System.Net.Http.Headers.MediaTypeHeaderValue,System.String,System.String,System.String[])">
            <summary>
            Sets the sample response directly for the specified media type of the action with specific parameters.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="sample">The sample response.</param>
            <param name="mediaType">The media type.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
            <param name="parameterNames">The parameter names.</param>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Areas.HelpPage.HelpPageConfigurationExtensions.SetSampleForMediaType(System.Web.Http.HttpConfiguration,System.Object,System.Net.Http.Headers.MediaTypeHeaderValue)">
            <summary>
            Sets the sample directly for all actions with the specified media type.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="sample">The sample.</param>
            <param name="mediaType">The media type.</param>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Areas.HelpPage.HelpPageConfigurationExtensions.SetSampleForType(System.Web.Http.HttpConfiguration,System.Object,System.Net.Http.Headers.MediaTypeHeaderValue,System.Type)">
            <summary>
            Sets the sample directly for all actions with the specified type and media type.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="sample">The sample.</param>
            <param name="mediaType">The media type.</param>
            <param name="type">The parameter type or return type of an action.</param>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Areas.HelpPage.HelpPageConfigurationExtensions.SetActualRequestType(System.Web.Http.HttpConfiguration,System.Type,System.String,System.String)">
            <summary>
            Specifies the actual type of <see cref="T:System.Net.Http.ObjectContent`1"/> passed to the <see cref="T:System.Net.Http.HttpRequestMessage"/> in an action.
            The help page will use this information to produce more accurate request samples.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="type">The type.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Areas.HelpPage.HelpPageConfigurationExtensions.SetActualRequestType(System.Web.Http.HttpConfiguration,System.Type,System.String,System.String,System.String[])">
            <summary>
            Specifies the actual type of <see cref="T:System.Net.Http.ObjectContent`1"/> passed to the <see cref="T:System.Net.Http.HttpRequestMessage"/> in an action.
            The help page will use this information to produce more accurate request samples.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="type">The type.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
            <param name="parameterNames">The parameter names.</param>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Areas.HelpPage.HelpPageConfigurationExtensions.SetActualResponseType(System.Web.Http.HttpConfiguration,System.Type,System.String,System.String)">
            <summary>
            Specifies the actual type of <see cref="T:System.Net.Http.ObjectContent`1"/> returned as part of the <see cref="T:System.Net.Http.HttpRequestMessage"/> in an action.
            The help page will use this information to produce more accurate response samples.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="type">The type.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Areas.HelpPage.HelpPageConfigurationExtensions.SetActualResponseType(System.Web.Http.HttpConfiguration,System.Type,System.String,System.String,System.String[])">
            <summary>
            Specifies the actual type of <see cref="T:System.Net.Http.ObjectContent`1"/> returned as part of the <see cref="T:System.Net.Http.HttpRequestMessage"/> in an action.
            The help page will use this information to produce more accurate response samples.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="type">The type.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
            <param name="parameterNames">The parameter names.</param>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Areas.HelpPage.HelpPageConfigurationExtensions.GetHelpPageSampleGenerator(System.Web.Http.HttpConfiguration)">
            <summary>
            Gets the help page sample generator.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <returns>The help page sample generator.</returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Areas.HelpPage.HelpPageConfigurationExtensions.SetHelpPageSampleGenerator(System.Web.Http.HttpConfiguration,cxOrganization.WebServiceAPI.Areas.HelpPage.HelpPageSampleGenerator)">
            <summary>
            Sets the help page sample generator.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="sampleGenerator">The help page sample generator.</param>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Areas.HelpPage.HelpPageConfigurationExtensions.GetModelDescriptionGenerator(System.Web.Http.HttpConfiguration)">
            <summary>
            Gets the model description generator.
            </summary>
            <param name="config">The configuration.</param>
            <returns>The <see cref="T:cxOrganization.WebServiceAPI.Areas.HelpPage.ModelDescriptions.ModelDescriptionGenerator"/></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Areas.HelpPage.HelpPageConfigurationExtensions.GetHelpPageApiModel(System.Web.Http.HttpConfiguration,System.String)">
            <summary>
            Gets the model that represents an API displayed on the help page. The model is initialized on the first call and cached for subsequent calls.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="apiDescriptionId">The <see cref="T:System.Web.Http.Description.ApiDescription"/> ID.</param>
            <returns>
            An <see cref="T:cxOrganization.WebServiceAPI.Areas.HelpPage.Models.HelpPageApiModel"/>
            </returns>
        </member>
        <member name="T:cxOrganization.WebServiceAPI.Areas.HelpPage.ModelDescriptions.ModelDescription">
            <summary>
            Describes a type model.
            </summary>
        </member>
        <member name="T:cxOrganization.WebServiceAPI.Areas.HelpPage.ModelDescriptions.ModelDescriptionGenerator">
            <summary>
            Generates model descriptions for given types.
            </summary>
        </member>
        <member name="T:cxOrganization.WebServiceAPI.Areas.HelpPage.ModelDescriptions.ModelNameAttribute">
            <summary>
            Use this attribute to change the name of the <see cref="T:cxOrganization.WebServiceAPI.Areas.HelpPage.ModelDescriptions.ModelDescription"/> generated for a type.
            </summary>
        </member>
        <member name="T:cxOrganization.WebServiceAPI.Areas.HelpPage.Models.HelpPageApiModel">
            <summary>
            The model that represents an API displayed on the help page.
            </summary>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Areas.HelpPage.Models.HelpPageApiModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:cxOrganization.WebServiceAPI.Areas.HelpPage.Models.HelpPageApiModel"/> class.
            </summary>
        </member>
        <member name="P:cxOrganization.WebServiceAPI.Areas.HelpPage.Models.HelpPageApiModel.ApiDescription">
            <summary>
            Gets or sets the <see cref="P:cxOrganization.WebServiceAPI.Areas.HelpPage.Models.HelpPageApiModel.ApiDescription"/> that describes the API.
            </summary>
        </member>
        <member name="P:cxOrganization.WebServiceAPI.Areas.HelpPage.Models.HelpPageApiModel.UriParameters">
            <summary>
            Gets or sets the <see cref="T:cxOrganization.WebServiceAPI.Areas.HelpPage.ModelDescriptions.ParameterDescription"/> collection that describes the URI parameters for the API.
            </summary>
        </member>
        <member name="P:cxOrganization.WebServiceAPI.Areas.HelpPage.Models.HelpPageApiModel.RequestDocumentation">
            <summary>
            Gets or sets the documentation for the request.
            </summary>
        </member>
        <member name="P:cxOrganization.WebServiceAPI.Areas.HelpPage.Models.HelpPageApiModel.RequestModelDescription">
            <summary>
            Gets or sets the <see cref="T:cxOrganization.WebServiceAPI.Areas.HelpPage.ModelDescriptions.ModelDescription"/> that describes the request body.
            </summary>
        </member>
        <member name="P:cxOrganization.WebServiceAPI.Areas.HelpPage.Models.HelpPageApiModel.RequestBodyParameters">
            <summary>
            Gets the request body parameter descriptions.
            </summary>
        </member>
        <member name="P:cxOrganization.WebServiceAPI.Areas.HelpPage.Models.HelpPageApiModel.ResourceDescription">
            <summary>
            Gets or sets the <see cref="T:cxOrganization.WebServiceAPI.Areas.HelpPage.ModelDescriptions.ModelDescription"/> that describes the resource.
            </summary>
        </member>
        <member name="P:cxOrganization.WebServiceAPI.Areas.HelpPage.Models.HelpPageApiModel.ResourceProperties">
            <summary>
            Gets the resource property descriptions.
            </summary>
        </member>
        <member name="P:cxOrganization.WebServiceAPI.Areas.HelpPage.Models.HelpPageApiModel.SampleRequests">
            <summary>
            Gets the sample requests associated with the API.
            </summary>
        </member>
        <member name="P:cxOrganization.WebServiceAPI.Areas.HelpPage.Models.HelpPageApiModel.SampleResponses">
            <summary>
            Gets the sample responses associated with the API.
            </summary>
        </member>
        <member name="P:cxOrganization.WebServiceAPI.Areas.HelpPage.Models.HelpPageApiModel.ErrorMessages">
            <summary>
            Gets the error messages associated with this model.
            </summary>
        </member>
        <member name="T:cxOrganization.WebServiceAPI.Areas.HelpPage.HelpPageSampleGenerator">
            <summary>
            This class will generate the samples for the help page.
            </summary>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Areas.HelpPage.HelpPageSampleGenerator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:cxOrganization.WebServiceAPI.Areas.HelpPage.HelpPageSampleGenerator"/> class.
            </summary>
        </member>
        <member name="P:cxOrganization.WebServiceAPI.Areas.HelpPage.HelpPageSampleGenerator.ActualHttpMessageTypes">
            <summary>
            Gets CLR types that are used as the content of <see cref="T:System.Net.Http.HttpRequestMessage"/> or <see cref="T:System.Net.Http.HttpResponseMessage"/>.
            </summary>
        </member>
        <member name="P:cxOrganization.WebServiceAPI.Areas.HelpPage.HelpPageSampleGenerator.ActionSamples">
            <summary>
            Gets the objects that are used directly as samples for certain actions.
            </summary>
        </member>
        <member name="P:cxOrganization.WebServiceAPI.Areas.HelpPage.HelpPageSampleGenerator.SampleObjects">
            <summary>
            Gets the objects that are serialized as samples by the supported formatters.
            </summary>
        </member>
        <member name="P:cxOrganization.WebServiceAPI.Areas.HelpPage.HelpPageSampleGenerator.SampleObjectFactories">
            <summary>
            Gets factories for the objects that the supported formatters will serialize as samples. Processed in order,
            stopping when the factory successfully returns a non-<see langref="null"/> object.
            </summary>
            <remarks>
            Collection includes just <see cref="M:cxOrganization.WebServiceAPI.Areas.HelpPage.ObjectGenerator.GenerateObject(System.Type)"/> initially. Use
            <code>SampleObjectFactories.Insert(0, func)</code> to provide an override and
            <code>SampleObjectFactories.Add(func)</code> to provide a fallback.</remarks>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Areas.HelpPage.HelpPageSampleGenerator.GetSampleRequests(System.Web.Http.Description.ApiDescription)">
            <summary>
            Gets the request body samples for a given <see cref="T:System.Web.Http.Description.ApiDescription"/>.
            </summary>
            <param name="api">The <see cref="T:System.Web.Http.Description.ApiDescription"/>.</param>
            <returns>The samples keyed by media type.</returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Areas.HelpPage.HelpPageSampleGenerator.GetSampleResponses(System.Web.Http.Description.ApiDescription)">
            <summary>
            Gets the response body samples for a given <see cref="T:System.Web.Http.Description.ApiDescription"/>.
            </summary>
            <param name="api">The <see cref="T:System.Web.Http.Description.ApiDescription"/>.</param>
            <returns>The samples keyed by media type.</returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Areas.HelpPage.HelpPageSampleGenerator.GetSample(System.Web.Http.Description.ApiDescription,cxOrganization.WebServiceAPI.Areas.HelpPage.SampleDirection)">
            <summary>
            Gets the request or response body samples.
            </summary>
            <param name="api">The <see cref="T:System.Web.Http.Description.ApiDescription"/>.</param>
            <param name="sampleDirection">The value indicating whether the sample is for a request or for a response.</param>
            <returns>The samples keyed by media type.</returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Areas.HelpPage.HelpPageSampleGenerator.GetActionSample(System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.Type,System.Net.Http.Formatting.MediaTypeFormatter,System.Net.Http.Headers.MediaTypeHeaderValue,cxOrganization.WebServiceAPI.Areas.HelpPage.SampleDirection)">
            <summary>
            Search for samples that are provided directly through <see cref="P:cxOrganization.WebServiceAPI.Areas.HelpPage.HelpPageSampleGenerator.ActionSamples"/>.
            </summary>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
            <param name="parameterNames">The parameter names.</param>
            <param name="type">The CLR type.</param>
            <param name="formatter">The formatter.</param>
            <param name="mediaType">The media type.</param>
            <param name="sampleDirection">The value indicating whether the sample is for a request or for a response.</param>
            <returns>The sample that matches the parameters.</returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Areas.HelpPage.HelpPageSampleGenerator.GetSampleObject(System.Type)">
            <summary>
            Gets the sample object that will be serialized by the formatters. 
            First, it will look at the <see cref="P:cxOrganization.WebServiceAPI.Areas.HelpPage.HelpPageSampleGenerator.SampleObjects"/>. If no sample object is found, it will try to create
            one using <see cref="M:cxOrganization.WebServiceAPI.Areas.HelpPage.HelpPageSampleGenerator.DefaultSampleObjectFactory(cxOrganization.WebServiceAPI.Areas.HelpPage.HelpPageSampleGenerator,System.Type)"/> (which wraps an <see cref="T:cxOrganization.WebServiceAPI.Areas.HelpPage.ObjectGenerator"/>) and other
            factories in <see cref="P:cxOrganization.WebServiceAPI.Areas.HelpPage.HelpPageSampleGenerator.SampleObjectFactories"/>.
            </summary>
            <param name="type">The type.</param>
            <returns>The sample object.</returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Areas.HelpPage.HelpPageSampleGenerator.ResolveHttpRequestMessageType(System.Web.Http.Description.ApiDescription)">
            <summary>
            Resolves the actual type of <see cref="T:System.Net.Http.ObjectContent`1"/> passed to the <see cref="T:System.Net.Http.HttpRequestMessage"/> in an action.
            </summary>
            <param name="api">The <see cref="T:System.Web.Http.Description.ApiDescription"/>.</param>
            <returns>The type.</returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Areas.HelpPage.HelpPageSampleGenerator.ResolveType(System.Web.Http.Description.ApiDescription,System.String,System.String,System.Collections.Generic.IEnumerable{System.String},cxOrganization.WebServiceAPI.Areas.HelpPage.SampleDirection,System.Collections.ObjectModel.Collection{System.Net.Http.Formatting.MediaTypeFormatter}@)">
            <summary>
            Resolves the type of the action parameter or return value when <see cref="T:System.Net.Http.HttpRequestMessage"/> or <see cref="T:System.Net.Http.HttpResponseMessage"/> is used.
            </summary>
            <param name="api">The <see cref="T:System.Web.Http.Description.ApiDescription"/>.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
            <param name="parameterNames">The parameter names.</param>
            <param name="sampleDirection">The value indicating whether the sample is for a request or a response.</param>
            <param name="formatters">The formatters.</param>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Areas.HelpPage.HelpPageSampleGenerator.WriteSampleObjectUsingFormatter(System.Net.Http.Formatting.MediaTypeFormatter,System.Object,System.Type,System.Net.Http.Headers.MediaTypeHeaderValue)">
            <summary>
            Writes the sample object using formatter.
            </summary>
            <param name="formatter">The formatter.</param>
            <param name="value">The value.</param>
            <param name="type">The type.</param>
            <param name="mediaType">Type of the media.</param>
            <returns></returns>
        </member>
        <member name="T:cxOrganization.WebServiceAPI.Areas.HelpPage.HelpPageSampleKey">
            <summary>
            This is used to identify the place where the sample should be applied.
            </summary>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Areas.HelpPage.HelpPageSampleKey.#ctor(System.Net.Http.Headers.MediaTypeHeaderValue)">
            <summary>
            Creates a new <see cref="T:cxOrganization.WebServiceAPI.Areas.HelpPage.HelpPageSampleKey"/> based on media type.
            </summary>
            <param name="mediaType">The media type.</param>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Areas.HelpPage.HelpPageSampleKey.#ctor(System.Net.Http.Headers.MediaTypeHeaderValue,System.Type)">
            <summary>
            Creates a new <see cref="T:cxOrganization.WebServiceAPI.Areas.HelpPage.HelpPageSampleKey"/> based on media type and CLR type.
            </summary>
            <param name="mediaType">The media type.</param>
            <param name="type">The CLR type.</param>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Areas.HelpPage.HelpPageSampleKey.#ctor(cxOrganization.WebServiceAPI.Areas.HelpPage.SampleDirection,System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates a new <see cref="T:cxOrganization.WebServiceAPI.Areas.HelpPage.HelpPageSampleKey"/> based on <see cref="P:cxOrganization.WebServiceAPI.Areas.HelpPage.HelpPageSampleKey.SampleDirection"/>, controller name, action name and parameter names.
            </summary>
            <param name="sampleDirection">The <see cref="P:cxOrganization.WebServiceAPI.Areas.HelpPage.HelpPageSampleKey.SampleDirection"/>.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
            <param name="parameterNames">The parameter names.</param>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Areas.HelpPage.HelpPageSampleKey.#ctor(System.Net.Http.Headers.MediaTypeHeaderValue,cxOrganization.WebServiceAPI.Areas.HelpPage.SampleDirection,System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates a new <see cref="T:cxOrganization.WebServiceAPI.Areas.HelpPage.HelpPageSampleKey"/> based on media type, <see cref="P:cxOrganization.WebServiceAPI.Areas.HelpPage.HelpPageSampleKey.SampleDirection"/>, controller name, action name and parameter names.
            </summary>
            <param name="mediaType">The media type.</param>
            <param name="sampleDirection">The <see cref="P:cxOrganization.WebServiceAPI.Areas.HelpPage.HelpPageSampleKey.SampleDirection"/>.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
            <param name="parameterNames">The parameter names.</param>
        </member>
        <member name="P:cxOrganization.WebServiceAPI.Areas.HelpPage.HelpPageSampleKey.ControllerName">
            <summary>
            Gets the name of the controller.
            </summary>
            <value>
            The name of the controller.
            </value>
        </member>
        <member name="P:cxOrganization.WebServiceAPI.Areas.HelpPage.HelpPageSampleKey.ActionName">
            <summary>
            Gets the name of the action.
            </summary>
            <value>
            The name of the action.
            </value>
        </member>
        <member name="P:cxOrganization.WebServiceAPI.Areas.HelpPage.HelpPageSampleKey.MediaType">
            <summary>
            Gets the media type.
            </summary>
            <value>
            The media type.
            </value>
        </member>
        <member name="P:cxOrganization.WebServiceAPI.Areas.HelpPage.HelpPageSampleKey.ParameterNames">
            <summary>
            Gets the parameter names.
            </summary>
        </member>
        <member name="P:cxOrganization.WebServiceAPI.Areas.HelpPage.HelpPageSampleKey.SampleDirection">
            <summary>
            Gets the <see cref="P:cxOrganization.WebServiceAPI.Areas.HelpPage.HelpPageSampleKey.SampleDirection"/>.
            </summary>
        </member>
        <member name="T:cxOrganization.WebServiceAPI.Areas.HelpPage.ImageSample">
            <summary>
            This represents an image sample on the help page. There's a display template named ImageSample associated with this class.
            </summary>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Areas.HelpPage.ImageSample.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:cxOrganization.WebServiceAPI.Areas.HelpPage.ImageSample"/> class.
            </summary>
            <param name="src">The URL of an image.</param>
        </member>
        <member name="T:cxOrganization.WebServiceAPI.Areas.HelpPage.InvalidSample">
            <summary>
            This represents an invalid sample on the help page. There's a display template named InvalidSample associated with this class.
            </summary>
        </member>
        <member name="T:cxOrganization.WebServiceAPI.Areas.HelpPage.ObjectGenerator">
            <summary>
            This class will create an object of a given type and populate it with sample data.
            </summary>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Areas.HelpPage.ObjectGenerator.GenerateObject(System.Type)">
            <summary>
            Generates an object for a given type. The type needs to be public, have a public default constructor and settable public properties/fields. Currently it supports the following types:
            Simple types: <see cref="T:System.Int32"/>, <see cref="T:System.String"/>, <see cref="T:System.Enum"/>, <see cref="T:System.DateTime"/>, <see cref="T:System.Uri"/>, etc.
            Complex types: POCO types.
            Nullables: <see cref="T:System.Nullable`1"/>.
            Arrays: arrays of simple types or complex types.
            Key value pairs: <see cref="T:System.Collections.Generic.KeyValuePair`2"/>
            Tuples: <see cref="T:System.Tuple`1"/>, <see cref="T:System.Tuple`2"/>, etc
            Dictionaries: <see cref="T:System.Collections.Generic.IDictionary`2"/> or anything deriving from <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            Collections: <see cref="T:System.Collections.Generic.IList`1"/>, <see cref="T:System.Collections.Generic.IEnumerable`1"/>, <see cref="T:System.Collections.Generic.ICollection`1"/>, <see cref="T:System.Collections.IList"/>, <see cref="T:System.Collections.IEnumerable"/>, <see cref="T:System.Collections.ICollection"/> or anything deriving from <see cref="T:System.Collections.Generic.ICollection`1"/> or <see cref="T:System.Collections.IList"/>.
            Queryables: <see cref="T:System.Linq.IQueryable"/>, <see cref="T:System.Linq.IQueryable`1"/>.
            </summary>
            <param name="type">The type.</param>
            <returns>An object of the given type.</returns>
        </member>
        <member name="T:cxOrganization.WebServiceAPI.Areas.HelpPage.SampleDirection">
            <summary>
            Indicates whether the sample is used for request or response
            </summary>
        </member>
        <member name="T:cxOrganization.WebServiceAPI.Areas.HelpPage.TextSample">
            <summary>
            This represents a preformatted text sample on the help page. There's a display template named TextSample associated with this class.
            </summary>
        </member>
        <member name="T:cxOrganization.WebServiceAPI.Areas.HelpPage.XmlDocumentationProvider">
            <summary>
            A custom <see cref="T:System.Web.Http.Description.IDocumentationProvider"/> that reads the API documentation from an XML documentation file.
            </summary>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Areas.HelpPage.XmlDocumentationProvider.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:cxOrganization.WebServiceAPI.Areas.HelpPage.XmlDocumentationProvider"/> class.
            </summary>
            <param name="documentPath">The physical path to XML document.</param>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.ApiVersionsController.#ctor">
            <summary>
            Versions for all Conxeus DTOs
            </summary>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.ApiVersionsController.GetDtosSupportedVersions">
            <summary>
            Get all supported versions for all Conxeus DTOs
            </summary>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.ApiVersionsController.GetAllConexusDTOs">
            <summary>
            Get all conexus DTOs
            </summary>
            <returns></returns>
        </member>
        <member name="T:cxOrganization.WebServiceAPI.Controllers.CandidateDepartmentsController">
            <summary>
            CandidateDepartments API 
            </summary>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.CandidateDepartmentsController.#ctor(System.Func{System.String,cxOrganization.Domain.Services.IDepartmentService},cxPlatform.Core.Context.IWorkContext)">
            <summary>
            CandidateDepartments API Constructor
            </summary>
            <param name="departmentService"></param>
            <param name="workContext"></param>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.CandidateDepartmentsController.GetCandidateDepartments(System.Int32,System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{cxPlatform.Client.ConexusBase.EntityStatusEnum},System.Collections.Generic.List{System.String},System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Boolean,System.Int32,System.Int32,System.String,System.Web.OData.Query.ODataQueryOptions{cxOrganization.Client.Latest.Departments.CandidateDepartmentDto})">
            <summary>
             Get candidate Departments
            </summary>
            <param name="candidateDepartmentIds"></param>
            <param name="statusEnums">CandidateDepartment status enums: Default is active</param>
            <param name="selectIdentity"></param>
            <param name="extIds"></param>
            <param name="lastUpdatedBefore"></param>
            <param name="lastUpdatedAfter"></param>
            <param name="queryOptions"></param>
            <param name="parentDepartmentId"></param>
            <param name="orderBy"></param>
            <param name="extId">obsolete</param>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.CandidateDepartmentsController.InsertCandidateDepartment(cxOrganization.Client.Latest.Departments.CandidateDepartmentDto)">
            <summary>
            insert candidate department
            </summary>
            <param name="candidateDepartmentDto"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.CandidateDepartmentsController.GetCandidateDepartment(System.Int32)">
            <summary>
            get candidate department by candidate department's id
            </summary>
            <param name="candidatedepartmentid"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.CandidateDepartmentsController.UpdateCandidateDepartment(System.Int32,cxOrganization.Client.Latest.Departments.CandidateDepartmentDto)">
            <summary>
            update Candidate Department
            </summary>
            <param name="candidatedepartmentid"></param>
            <param name="candidateDepartmentDto"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.CandidateDepartmentsController.InsertCandidateDepartment(System.Int32,System.Int32,cxOrganization.Client.Latest.Departments.CandidateDepartmentDto)">
            <summary>
            Insert Candidate Department (This endpoint is obsolete)
            </summary>
            <param name="dataownerid"></param>
            <param name="companyid"></param>
            <param name="candidateDepartmentDto"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.CandidateDepartmentsController.GetCandidateDepartment(System.Int32,System.Int32,System.Int32)">
            <summary>
            Get candidate department by id (This endpoint is obsolete)
            </summary>
            <param name="dataownerid"></param>
            <param name="companyid"></param>
            <param name="candidatedepartmentid"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.CandidateDepartmentsController.GetCandidateDepartments(System.Int32,System.Int32)">
            <summary>
            Get candidate departments on data owner (This endpoint is obsolete)
            </summary>
            <param name="dataownerid"></param>
            <param name="companyid"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.CandidateDepartmentsController.UpdateCandidateDepartment(System.Int32,System.Int32,System.Int32,cxOrganization.Client.Latest.Departments.CandidateDepartmentDto)">
            <summary>
            Update candidate department by given id (This endpoint is obsolete)
            </summary>
            <param name="dataownerid"></param>
            <param name="companyid"></param>
            <param name="candidatedepartmentid"></param>
            <param name="candidateDepartmentDto"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.CandidateListController.GetCandidateList(cxOrganization.Business.CandidateList.CandidateListArguments)">
            <summary>
            Get candidate list
            </summary>
            <param name="candidateListArguments">The arguments for filtering, sorting, paging when retrieving candidate list</param>
            <returns></returns>
        </member>
        <member name="T:cxOrganization.WebServiceAPI.Controllers.CandidatePoolsController">
            <summary>
            CandidatePool API 
            </summary>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.CandidatePoolsController.#ctor(cxOrganization.Domain.Services.ICandidatePoolMemberService,cxPlatform.Core.Context.IWorkContext,System.Func{System.String,cxOrganization.Domain.Services.IUserService},System.Func{System.String,cxOrganization.Domain.Services.IUserGroupService},System.Func{System.String,cxOrganization.Domain.Services.IDepartmentService},cxOrganization.Domain.IOrganizationUnitOfWork)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.CandidatePoolsController.GetCandidatepools(System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{cxPlatform.Client.ConexusBase.EntityStatusEnum},System.Collections.Generic.List{cxOrganization.Client.Latest.UserGroups.GrouptypeEnum},System.Collections.Generic.List{System.String},System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Boolean,System.Int32,System.Int32,System.String,System.Web.OData.Query.ODataQueryOptions{cxOrganization.Client.Latest.UserGroups.CandidatePoolDto})">
            <summary>
            Get Candidate Pools
            </summary>
            <param name="candidatepoolIds"></param>
            <param name="userIds"></param>
            <param name="statusEnums">CandidatePools StatusEnums: Default is Active </param>
            <param name="extIds"></param>
            <param name="selectIdentity"></param>
            <param name="lastUpdatedBefore"></param>
            <param name="lastUpdatedAfter"></param>
            <param name="queryOptions"></param>
            <param name="extId"></param>
            <param name="departmentIds"></param>
            <param name="groupTypes"></param>
            <param name="orderBy"></param>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.CandidatePoolsController.InsertCandidatePool(cxOrganization.Client.Latest.UserGroups.CandidatePoolDto)">
            <summary>
            Create CandidatePool
            </summary>
            <param name="candidatePoolDto"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.CandidatePoolsController.GetCandidatePool(System.Int32)">
             <summary>
             Get candidate pool by identifier
             </summary>
            <param name="candidatepoolid"></param>
             <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.CandidatePoolsController.UpdateCandidatePool(System.Int32,cxOrganization.Client.Latest.UserGroups.CandidatePoolDto)">
             <summary>
             Update CandidatePool
             </summary>
             <param name="candidatePoolDto"></param>
            <param name="candidatepoolid"></param>
             <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.CandidatePoolsController.GetCandidatesBelongCandidatePool(System.Int32,System.Collections.Generic.List{cxPlatform.Client.ConexusBase.EntityStatusEnum},System.Boolean,System.Int32,System.Int32,System.String,System.Web.OData.Query.ODataQueryOptions{cxOrganization.Client.Latest.Users.CandidateDto})">
            <summary>
            Get candidates that belong candidatepool
            </summary>
            <param name="candidatepoolid"></param>
            <param name="statusEnums"></param>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <param name="orderBy"></param>
            <param name="queryOptions"></param>
            <param name="selectIdentity"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.CandidatePoolsController.GetCandidateBelongCandidatePool(System.Int32,System.Int32)">
            <summary>
            Get Candidate that belongs CandidatePool
            </summary>
            <param name="candidatepoolid"></param>
            <param name="candidateid"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.CandidatePoolsController.GetDataOwner(System.Int32,System.Collections.Generic.List{cxPlatform.Client.ConexusBase.EntityStatusEnum})">
            <summary>
            get Data Owners that the candidate belong
            </summary>
            <param name="candidatepoolid"></param>
            <param name="statusEnums">DataOwner StatusEnums: Default is active</param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.CandidatePoolsController.GetDataOwner(System.Int32,System.Int32)">
            <summary>
            Get Data Owner that the candidate belong
            </summary>
            <param name="candidatepoolid"></param>
            <param name="dataownerid"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.CandidatePoolsController.GetCompanies(System.Int32,System.Collections.Generic.List{cxPlatform.Client.ConexusBase.EntityStatusEnum},System.Int32,System.Int32,System.String,System.Web.OData.Query.ODataQueryOptions{cxOrganization.Client.Latest.Departments.CompanyDto})">
            <summary>
            Get companies that candidate belong to
            </summary>
            <param name="candidatepoolid"></param>
            <param name="statusEnums">company status enums</param>
            <param name="queryOptions"></param>
            <param name="orderBy"></param>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.CandidatePoolsController.GetCompany(System.Int32,System.Int32)">
            <summary>
            get company that the candidate belong
            </summary>
            <param name="candidatepoolid"></param>
            <param name="companyid"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.CandidatePoolsController.InsertCandidatePool(System.Int32,System.Int32,cxOrganization.Client.Latest.UserGroups.CandidatePoolDto)">
            <summary>
            Create CandidatePool
            </summary>
            <param name="dataownerid"></param>
            <param name="companyid"></param>
            <param name="candidatePoolDto"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.CandidatePoolsController.UpdateCandidatePool(System.Int32,System.Int32,System.Int32,cxOrganization.Client.Latest.UserGroups.CandidatePoolDto)">
             <summary>
             Update CandidatePool
             </summary>
             <param name="dataownerid"></param>
             <param name="companyid"></param>
             <param name="candidatePoolDto"></param>
            <param name="candidatepoolid"></param>
             <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.CandidatePoolsController.GetCandidatePool(System.Int32,System.Int32,System.Int32)">
             <summary>
             Get candidate pool
             </summary>
             <param name="dataownerid"></param>
             <param name="companyid"></param>
            <param name="candidatepoolid"></param>
             <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.CandidatePoolsController.GetCandidatePools(System.Int32,System.Int32)">
            <summary>
            Get candidate pools
            </summary>
            <param name="dataownerid"></param>
            <param name="companyid"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.CandidatePoolsController.DeleteCandidatePool(System.Int32,System.Int32,System.Int32)">
            <summary>
            Delete candidate pool
            </summary>
            <param name="dataownerid"></param>
            <param name="companyid"></param>
            <param name="candidatepoolid"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.CandidatePoolsController.AddMembers(System.Int32,System.Int32,System.Int32,cxOrganization.Client.Latest.MemberDto)">
            <summary>
            Get candidate pool member
            </summary>
            <param name="dataownerid"></param>
            <param name="companyid"></param>
            <param name="candidatepoolid"></param>
            <param name="memberDto"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.CandidatePoolsController.GetMembers(System.Int32,System.Int32,System.Int32)">
            <summary>
            Get candidate pool member
            </summary>
            <param name="dataownerid"></param>
            <param name="companyid"></param>
            <param name="candidatepoolid"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.CandidatePoolsController.GetMember(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Get group member
            </summary>
            <param name="dataownerid"></param>
            <param name="companyid"></param>
            <param name="candidatepoolid"></param>
            <param name="memberid"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.CandidatePoolsController.GetMemberships(System.Int32,System.Int32,System.Int32)">
            <summary>
            Get group membership
            </summary>
            <param name="dataownerid"></param>
            <param name="companyid"></param>
            <param name="candidatepoolid"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.CandidatePoolsController.GetCandidatepoolsOnDataOwner(System.Int32)">
            <summary>
             Get candidate pools
            </summary>
            <param name="departmentId"></param>
            <returns></returns>
        </member>
        <member name="T:cxOrganization.WebServiceAPI.Controllers.CandidatesController">
            <summary>
            Candidate API 
            </summary>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.CandidatesController.#ctor(System.Func{System.String,cxOrganization.Domain.Services.IUserService},System.Func{System.String,cxOrganization.Domain.Services.IUserGroupService},System.Func{System.String,cxOrganization.Domain.Services.IDepartmentService},cxPlatform.Core.Context.IWorkContext,System.Func{System.String,cxOrganization.Domain.Services.IUGMemberService},cxOrganization.Domain.Services.ICandidatePoolMemberService,System.Func{System.String,cxOrganization.Domain.Services.IUserTypeService},cxOrganization.Domain.Services.ILoginServiceUserService)">
            <summary>
            Constructor
            </summary>
            <param name="userService"></param>
            <param name="userGroupService"></param>
            <param name="departmentService"></param>
            <param name="workContext"></param>
            <param name="candidatePoolMemberService">This class responsible for add membership between candidate and candidate pool </param>
            <param name="userGroupUserMemberService"></param>
            <param name="userTypeService"></param>
            <param name="loginServiceUserService"></param>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.CandidatesController.GetCandidates(System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{cxPlatform.Client.ConexusBase.EntityStatusEnum},System.Collections.Generic.List{System.String},System.Collections.Generic.List{cxOrganization.Domain.Enums.AgeRange},System.Collections.Generic.List{cxOrganization.Domain.Enums.Gender},System.Collections.Generic.List{cxPlatform.Client.ConexusBase.EntityStatusEnum},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.String,System.String,System.Collections.Generic.List{System.String},System.String,System.Collections.Generic.List{System.String},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.Int32},System.Int32,System.Int32,System.String,System.Boolean,System.Web.OData.Query.ODataQueryOptions{cxOrganization.Client.Latest.Users.CandidateDto})">
            <summary>
            Get Candidates
            </summary>
            <param name="parentDepartmentIds"></param>
            <param name="candidateIds"></param>
            <param name="userGroupIds"></param>
            <param name="statusEnums">Candidate StatusEnum: Default is Active</param>
            <param name="extIds"></param>
            <param name="ssnList"></param>
            <param name="lastUpdatedBefore"></param>
            <param name="lastUpdatedAfter"></param>
            <param name="queryOptions"></param>
            <param name="getDynamicProperties"></param>
            <param name="orderBy"></param>
            <param name="loginServiceIds"></param>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <param name="selectIdentity"></param>
            <param name="extId"></param>
            <param name="ageRanges"></param>
            <param name="genders"></param>
            <param name="searchKey"></param>
            <param name="ssn"></param>
            <param name="userNames"></param>
            <param name="memberValidFromBefore">Filter on UGmember Valid From(Just work when filter by userGroupIds)</param>
            <param name="memberValidFromAfter">Filter on UGmember Valid From(Just work when filter by userGroupIds)</param>
            <param name="memberValidToBefore">Filter on UGmember Valid To(Just work when filter by userGroupIds)</param>
            <param name="memberValidToAfter">Filter on UGmember Valid To(Just work when filter by userGroupIds)</param>
            <param name="memberStatuses">Filter on UGMember Status(Just work when filter by userGroupIds)</param>
            <param name="getLoginServiceClaims"></param>
            <param name="loginServiceClaims"></param>
            <param name="loginServiceClaimTypes"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.CandidatesController.InsertCandidates(cxOrganization.Client.Latest.Users.CandidateDto)">
            <summary>
            Insert candidate
            </summary>
            <param name="candidateDto"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.CandidatesController.GetCandidate(System.Int32)">
            <summary>
            Get candidate by identifier
            </summary>
            <param name="candidateid"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.CandidatesController.UpdateCandidate(System.Int32,cxOrganization.Client.Latest.Users.CandidateDto,System.Boolean)">
            <summary>
            Update candidate
            </summary>
            <param name="candidateid"></param>
            <param name="candidateDto"></param>
            <param name="skipCheckingEntityVersion"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.CandidatesController.GetCandidatepool(System.Int32,System.Collections.Generic.List{cxPlatform.Client.ConexusBase.EntityStatusEnum},System.Web.OData.Query.ODataQueryOptions{cxOrganization.Client.Latest.UserGroups.CandidatePoolDto})">
            <summary>
            Get all Candidate pools that candidate belongs to
            </summary>
            <param name="candidateid"></param>
            <param name="statusEnums">candidate pool status enums</param>
            <param name="queryOptions"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.CandidatesController.GetCandidatepoolBelong(System.Int32,System.Int32)">
            <summary>
            Get candidatepool by candidatepoolid which candaidate belong 
            </summary>
            <param name="candidateid"></param>
            <param name="candidatepoolid"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.CandidatesController.GetcountriesBelong(System.Int32,System.Collections.Generic.List{cxPlatform.Client.ConexusBase.EntityStatusEnum})">
            <summary>
            Get all countries that candidate belongs to
            </summary>
            <param name="candidateid"></param>
            <param name="statusEnums">country status enums</param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.CandidatesController.GetCountryBelong(System.Int32,System.Int32)">
            <summary>
            Get country which candidate belongs to
            </summary>
            <param name="candidateid"></param>
            <param name="countryid"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.CandidatesController.InsertCandidatePoolMembership(System.Int32,cxOrganization.Client.Latest.MemberDto)">
            <summary>
            Add candidate to candidate pool
            </summary>
            <param name="candidateId"></param>
            <param name="candidatePoolMDto"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.CandidatesController.UpdateCandidatePoolMembership(System.Int32,cxOrganization.Client.Latest.MemberDto)">
            <summary>
            Remove candidate on candidate pool
            </summary>
            <param name="candidateId"></param>
            <param name="candidatePoolMDto"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.CandidatesController.GetCandidatesOnDataOwner(System.Int32)">
            <summary>
            Get candidate on data owner
            </summary>
            <param name="dataownerid"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.CandidatesController.GetCandidateOnDataowner(System.Int32,System.Int32)">
            <summary>
            Get candidate on data owner
            </summary>
            <param name="dataownerid"></param>
            <param name="candidateid"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.CandidatesController.GetCandidatesOnCountry(System.Int32,System.Int32)">
            <summary>
            Get candidate on country
            </summary>
            <param name="dataownerid"></param>
            <param name="countryid"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.CandidatesController.InsertCandidatesOnDataOwner(System.Int32,cxOrganization.Client.Latest.Users.CandidateDto)">
            <summary>
            Insert candidate on data owner
            </summary>
            <param name="dataownerid"></param>
            <param name="candidateDto"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.CandidatesController.GetCandidateOnCountry(System.Int32,System.Int32,System.Int32)">
            <summary>
            Get candidate on country 
            </summary>
            <param name="dataownerid"></param>
            <param name="countryid"></param>
            <param name="candidateid"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.CandidatesController.UpdateCandidateOnDataOwner(System.Int32,System.Int32,cxOrganization.Client.Latest.Users.CandidateDto)">
            <summary>
            Update candidate on data owner
            </summary>
            <param name="candidateid"></param>
            <param name="dataownerid"></param>
            <param name="candidateDto"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.CandidatesController.UpdateCandidateOnCountry(System.Int32,System.Int32,System.Int32,cxOrganization.Client.Latest.Users.CandidateDto)">
            <summary>
            Update candidate on country
            </summary>
            <param name="candidateid"></param>
            <param name="dataownerid"></param>
            <param name="countryid"></param>
            <param name="candidateDto"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.CandidatesController.GetCandidateMembershipsOnDataOwner(System.Int32,System.Int32)">
            <summary>
            Get candidate memberships on data owner
            </summary>
            <param name="dataownerid"></param>
            <param name="candidateid"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.CandidatesController.GetCandidateMembershipsOnCountry(System.Int32,System.Int32,System.Int32)">
            <summary>
            Get candidate memberships on country
            </summary>
            <param name="dataownerid"></param>
            <param name="countryid"></param>
            <param name="candidateid"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.CandidatesController.AddCandidateRole(System.Int32,cxOrganization.Client.Latest.MemberDto)">
            <summary>
            Add usertypes for user
            </summary>
            <param name="candidateid"></param>
            <param name="memberDto">usertypes info</param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.CandidatesController.RemoveCandidateRole(System.Int32,cxOrganization.Client.Latest.MemberDto)">
            <summary>
            Remove candidate role
            </summary>
            <param name="candidateid"></param>
            <param name="memberDto">Holding role info</param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.CandidatesController.GetCandidateMemberships(System.Int32,System.Collections.Generic.List{cxPlatform.Client.ConexusBase.ArchetypeEnum},System.Collections.Generic.List{cxPlatform.Client.ConexusBase.EntityStatusEnum},System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.String})">
            <summary>
            Get candidate's memberships
            </summary>
            <param name="candidateid"></param>
            <param name="archetypeIds">membership archetype enum</param>
            <param name="statusIds">membership status enum</param>
            <param name="membershipIds"></param>
            <param name="membershipExtIds"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.CandidatesController.InsertLoginServiceClaim(cxOrganization.Client.Latest.Users.LoginServiceUserDto)">
            <summary>
            Insert loginServiceUser that contains claim value for a candidate in a login service.
            </summary>
            <param name="loginServiceUser"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.CandidatesController.UpdateLoginServiceClaim(cxOrganization.Client.Latest.Users.LoginServiceUserDto)">
            <summary>
            Update loginServiceUser that contains claim value for a candidate in a login service.
            </summary>
            <param name="loginServiceUser"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.CandidatesController.DeleteLoginServiceClaim(cxOrganization.Client.Latest.Users.LoginServiceUserDto)">
            <summary>
            Delete loginServiceUser that contains claim value for a candidate in a login service.
            </summary>
            <param name="loginServiceUser"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.CandidatesController.GetLoginServiceClaims(System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.String},System.Collections.Generic.List{cxPlatform.Client.ConexusBase.EntityStatusEnum},System.Collections.Generic.List{System.Int32},System.Nullable{System.Boolean},System.Collections.Generic.List{System.String},System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Get list of loginServiceUser of candidate based on given parameters
            </summary>
            <returns></returns>
        </member>
        <member name="T:cxOrganization.WebServiceAPI.Controllers.ClassesController">
            <summary> 
            Classes API 
            </summary>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.ClassesController.#ctor(System.Func{System.String,cxOrganization.Domain.Services.IDepartmentService},System.Func{System.String,cxOrganization.Domain.Services.IUserService},cxPlatform.Core.Context.IWorkContext,cxOrganization.Domain.Services.IClassMemberService)">
            <summary>
            Classes API 
            </summary>
            <param name="departmentService"></param>
            <param name="workContext"></param>
            <param name="classMemberService"></param>
            <param name="userService"></param>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.ClassesController.GetClasses(System.Int32,System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.String},System.Collections.Generic.List{cxPlatform.Client.ConexusBase.EntityStatusEnum},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Boolean,System.Int32,System.Int32,System.String,System.Web.OData.Query.ODataQueryOptions{cxOrganization.Client.Latest.Departments.ClassDto})">
            <summary>
            get classes
            </summary>
            <param name="userIds">Get class that have the userId</param>
            <param name="classIds"></param>
            <param name="statusEnums">Class StatusEnums: Default is Active</param>
            <param name="lastUpdatedBefore"></param>
            <param name="lastUpdatedAfter"></param>
            <param name="queryOptions"></param>
            <param name="parentDepartmentId">school department in HD department</param>
            <param name="extIds"></param>
            <param name="orderBy"></param>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <param name="selectIdentity"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.ClassesController.InsertClass(cxOrganization.Client.Latest.Departments.ClassDto)">
            <summary>
            insert class
            </summary>
            <param name="classItem"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.ClassesController.GetClass(System.Int32)">
            <summary>
            get class by identifier
            </summary>
            <param name="classid"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.ClassesController.UpdateClass(System.Int32,cxOrganization.Client.Latest.Departments.ClassDto)">
            <summary>
            Update class
            </summary>
            <param name="classId"></param>
            <param name="classDto"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.ClassesController.GetLearnersInClass(System.Int32,System.Collections.Generic.List{cxPlatform.Client.ConexusBase.EntityStatusEnum},System.Web.OData.Query.ODataQueryOptions{cxOrganization.Client.Latest.Users.LearnerDto})">
            <summary>
            get learners in class
            </summary>
            <param name="classid"></param>
            <param name="statusEnums">learner status enums</param>
            <param name="queryOptions"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.ClassesController.GetLearnerInClass(System.Int32,System.Int32)">
            <summary>
            Get learner in class
            </summary>
            <param name="classid"></param>
            <param name="learnerid"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.ClassesController.GetSchools(System.Int32)">
            <summary>
            Get schools that the class belongs to
            </summary>
            <param name="classid"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.ClassesController.GetLevel(System.Int32)">
            <summary>
            Get class's level
            </summary>
            <param name="classid"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.ClassesController.GetClassMemberships(System.Int32)">
            <summary>
            Get class's memberships
            </summary>
            <param name="classId"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.ClassesController.UpdateClasslevel(System.Int32,cxOrganization.Client.Latest.MemberDto)">
            <summary>
            Update class level membership
            </summary>
            <param name="classId"></param>
            <param name="levelDto"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.ClassesController.RemoveClasslevel(System.Int32,cxOrganization.Client.Latest.MemberDto)">
            <summary>
            remove class's level
            </summary>
            <param name="classId"></param>
            <param name="levelDto"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.ClassesController.InsertClasses(System.Int32,System.Int32,System.Collections.Generic.List{cxOrganization.Client.Latest.Departments.ClassDto})">
            <summary>
            Create class object to database
            </summary>
            <param name="schoolId"></param>
            <param name="classes"></param>
            <param name="schoolOwnerId"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.ClassesController.GetClassOnSchool(System.Int32,System.Int32,System.Int32)">
            <summary>
             Get class by id
            </summary>
            <param name="schoolOwnerId"></param>
            <param name="schoolId"></param>
            <param name="classId"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.ClassesController.GetClassesOnSchool(System.Int32,System.Int32)">
            <summary>
             Get class by school
            </summary>
            <param name="schoolOwnerId"></param>
            <param name="schoolId"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.ClassesController.UpdateClassOnSchool(System.Int32,System.Int32,System.Int32,cxOrganization.Client.Latest.Departments.ClassDto)">
            <summary>
            Update the whole class object by id given info
            </summary>
            <param name="classId"></param>
            <param name="schoolOwnerId"></param>
            <param name="schoolId"></param>
            <param name="classDto"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.ClassesController.AddMembers(System.Int32,System.Int32,System.Int32,cxOrganization.Client.Latest.MemberDto)">
            <summary>
            Add class member
            </summary>
            <param name="schoolid"></param>
            <param name="classid"></param>
            <param name="schoolownerid"></param>
            <param name="memberDto"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.ClassesController.GetMember(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Get class member
            </summary>
            <param name="schoolownerid"></param>
            <param name="schoolid"></param>
            <param name="classid"></param>
            <param name="memberid"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.ClassesController.GetMembers(System.Int32,System.Int32,System.Int32)">
            <summary>
            Get class members
            </summary>
            <param name="schoolownerid"></param>
            <param name="schoolid"></param>
            <param name="classid"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.ClassesController.UpdateMember(System.Int32,System.Int32,System.Int32,System.Int32,cxOrganization.Client.Latest.MemberDto)">
            <summary>
            Get class member
            </summary>
            <param name="schoolownerid"></param>
            <param name="schoolid"></param>
            <param name="classid"></param>
            <param name="memberid"></param>
            <param name="memberDto"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.ClassesController.GetClassMembership(System.Int32,System.Int32,System.Int32)">
            <summary>
            Get class membership
            </summary>
            <param name="schoolownerid"></param>
            <param name="schoolid"></param>
            <param name="classid"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.ClassesController.GetClassStatus(System.Int32,System.Int32,System.Int32)">
            <summary>
            Get class status
            </summary>
            <param name="schoolownerid"></param>
            <param name="schoolid"></param>
            <param name="classid"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.ClassesController.UpdateClassStatus(System.Int32,System.Int32,System.Int32,cxPlatform.Client.ConexusBase.Latest.EntityStatusDto)">
            <summary>
            Update class status
            </summary>
            <param name="schoolownerid"></param>
            <param name="schoolid"></param>
            <param name="classid"></param>
            <param name="statusDto"></param>
            <returns></returns>
        </member>
        <member name="T:cxOrganization.WebServiceAPI.Controllers.CompaniesController">
            <summary>
            Companies API 
            </summary>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.CompaniesController.#ctor(System.Func{System.String,cxOrganization.Domain.Services.IDepartmentService},System.Func{System.String,cxOrganization.Domain.Services.IUserGroupService},System.Func{System.String,cxOrganization.Domain.Services.IUserService},cxPlatform.Core.Context.IWorkContext)">
            <summary>
            Companies API Constructor
            </summary>
            <param name="departmentService"></param>
            <param name="workContext"></param>
            <param name="userGroupService"></param>
            <param name="userService"></param>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.CompaniesController.GetCompanies(System.Collections.Generic.List{System.Int32},System.Int32,System.Int32,System.Collections.Generic.List{cxPlatform.Client.ConexusBase.EntityStatusEnum},System.Collections.Generic.List{System.String},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.String,System.Int32,System.Int32,System.String,System.Boolean,System.Web.OData.Query.ODataQueryOptions{cxOrganization.Client.Latest.Departments.CompanyDto})">
            <summary>
            Get companies
            </summary>
            <param name="companyIds"></param>
            <param name="parentDepartmentId"></param>
            <param name="childrenDepartmentId"></param>
            <param name="statusEnums">Company statusEnum : Default is active</param>
            <param name="extIds"></param>
            <param name="lastUpdatedBefore"></param>
            <param name="lastUpdatedAfter"></param>
            <param name="extId">will be removed</param> 
            <param name="queryOptions"></param>
            <param name="orderBy"></param>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <param name="selectIdentity"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.CompaniesController.InsertCompany(cxOrganization.Client.Latest.Departments.CompanyDto)">
            <summary>
            Insert Company
            </summary>
            <param name="companyDto"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.CompaniesController.GetCompany(System.Int32)">
            <summary>
            Get company by id
            </summary>
            <param name="companyid"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.CompaniesController.UpdateCompany(System.Int32,cxOrganization.Client.Latest.Departments.CompanyDto)">
            <summary>
            Update company
            </summary>
            <param name="companyid"></param>
            <param name="companyDto"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.CompaniesController.GetCandidatePoolsOnCompany(System.Int32,System.Collections.Generic.List{cxPlatform.Client.ConexusBase.EntityStatusEnum},System.Web.OData.Query.ODataQueryOptions{cxOrganization.Client.Latest.UserGroups.CandidatePoolDto})">
            <summary>
            Get Company's candidate pools
            </summary>
            <param name="companyid"></param>
            <param name="statusEnums">candidate pool status enums</param>
            <param name="queryOptions"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.CompaniesController.GetCandidatePoolOnCompany(System.Int32,System.Int32)">
            <summary>
            Get candidatepool of the company by identifier
            </summary>
            <param name="companyid"></param>
            <param name="candidatepoolid"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.CompaniesController.GetCandidatesOnCompany(System.Int32,System.Collections.Generic.List{cxPlatform.Client.ConexusBase.EntityStatusEnum},System.Web.OData.Query.ODataQueryOptions{cxOrganization.Client.Latest.Users.CandidateDto})">
            <summary>
            Get Company's candidates
            </summary>
            <param name="companyid"></param>
            <param name="statusEnums"></param>
            <param name="queryOptions"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.CompaniesController.GetCandidateOnCompany(System.Int32,System.Int32)">
            <summary>
            Get Company's candidate
            </summary>
            <param name="companyid"></param>
            <param name="candidateid"></param>
            <returns></returns>
        </member>
        <member name="T:cxOrganization.WebServiceAPI.Controllers.CountriesController">
            <summary>
            Countries API 
            </summary>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.CountriesController.#ctor(System.Func{System.String,cxOrganization.Domain.Services.IDepartmentService},cxPlatform.Core.Context.IWorkContext,System.Func{System.String,cxOrganization.Domain.Services.IUserService})">
            <summary>
            Countries API Constructor
            </summary>
            <param name="departmentService"></param>
            <param name="workContext"></param>
            <param name="userService"></param>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.CountriesController.GetCountries(System.Int32,System.Int32,System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{cxPlatform.Client.ConexusBase.EntityStatusEnum},System.Collections.Generic.List{System.String},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.String,System.Boolean,System.Int32,System.Int32,System.String,System.Web.OData.Query.ODataQueryOptions{cxOrganization.Client.Latest.Departments.CountryDto})">
            <summary>
            Get countries
            </summary>
            <param name="countryIds"></param>
            <param name="statusEnums"></param>
            <param name="parentDepartmentId"></param>
            <param name="childrenDepartmentId"></param>
            <param name="extIds"></param>
            <param name="extId">Will be removed</param>
            <param name="lastUpdatedBefore"></param>
            <param name="lastUpdatedAfter"></param>
            <param name="queryOptions"></param>
            <param name="orderBy"></param>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <param name="selectIdentity"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.CountriesController.InsertCountry(cxOrganization.Client.Latest.Departments.CountryDto)">
            <summary>
            Insert Country
            </summary>
            <param name="countryDto"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.CountriesController.GetCountry(System.Int32)">
            <summary>
            Get country
            </summary>
            <param name="countryid"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.CountriesController.UpdateCountry(System.Int32,cxOrganization.Client.Latest.Departments.CountryDto)">
            <summary>
            Update country
            </summary>
            <param name="countryid"></param>
            <param name="countryDto"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.CountriesController.GetCandidatesOnCountry(System.Int32,System.Collections.Generic.List{cxPlatform.Client.ConexusBase.EntityStatusEnum},System.Web.OData.Query.ODataQueryOptions{cxOrganization.Client.Latest.Users.CandidateDto})">
            <summary>
            get country's candidates
            </summary>
            <param name="countryid"></param>
            <param name="statusEnums">candidate status enums</param>
            <param name="queryOptions"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.CountriesController.GetCandidateOnCountry(System.Int32,System.Int32)">
            <summary>
            get country's candidates
            </summary>
            <param name="countryid"></param>
            <param name="candidateid"></param>
            <returns></returns>
        </member>
        <member name="T:cxOrganization.WebServiceAPI.Controllers.CustomerController">
            <summary>
            Customer API(do not require cxtoken)
            </summary>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.CustomerController.#ctor(cxOrganization.Domain.Services.ICustomerService,cxPlatform.Core.Context.IWorkContext)">
            <summary>
            Contructor
            </summary>
            <param name="customerService"></param>
            <param name="workContext"></param>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.CustomerController.GetCustomersByOwner(System.Int32,System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.String},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Web.OData.Query.ODataQueryOptions{cxOrganization.Client.Latest.Customers.CustomerDto})">
            <summary>
            Get customers
            </summary>
            <param name="ownerid"></param>
            <param name="customerIds"></param>
            <param name="extIds"></param>
            <param name="createdBefore"></param>
            <param name="createdAfter"></param>
            <param name="queryOptions"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.CustomerController.InsertCustomer(cxOrganization.Client.Latest.Customers.CustomerDto,System.Int32)">
            <summary>
            Insert customer
            </summary>
            <param name="customer"></param>
            <param name="ownerId"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.CustomerController.GetCustomersByOwner(System.Int32,System.Int32)">
            <summary>
            Get customer
            </summary>
            <param name="ownerid"></param>
            <param name="customerid"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.CustomerController.UpdateCustomer(cxOrganization.Client.Latest.Customers.CustomerDto,System.Int32,System.Int32)">
            <summary>
            Update customer
            </summary>
            <param name="customer"></param>
            <param name="customerId"></param>
            <param name="ownerId"></param>
            <returns></returns>
        </member>
        <member name="T:cxOrganization.WebServiceAPI.Controllers.DataOwnersController">
            <summary>
            Data Owner API controller 
            </summary>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.DataOwnersController.#ctor(System.Func{System.String,cxOrganization.Domain.Services.IDepartmentService},cxPlatform.Core.Context.IWorkContext,cxOrganization.Domain.Services.IHierarchyDepartmentService)">
            <summary>
            Data Owner controller api
            </summary>
            <param name="departmentService"></param>
            <param name="workContext"></param>
            <param name="hierarchyDepartmentService"></param>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.DataOwnersController.GetDataOwners(System.Int32,System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{cxPlatform.Client.ConexusBase.EntityStatusEnum},System.Collections.Generic.List{System.String},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.String,System.Boolean,System.Int32,System.Int32,System.String,System.Web.OData.Query.ODataQueryOptions{cxOrganization.Client.Latest.Departments.DataOwnerDto})">
            <summary>
            Get Data Owners
            </summary>
            <param name="dataownerIds"></param>
            <param name="parentDepartmentId"></param>
            <param name="statusEnums">DataOwner's Status : default is Active</param>
            <param name="extId">Will be removed</param>
            <param name="extIds"></param>
            <param name="lastUpdatedBefore"></param>
            <param name="lastUpdatedAfter"></param>
            <param name="queryOptions"></param>
            <param name="orderBy"></param>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <param name="selectIdentity"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.DataOwnersController.InsertDataOwner(cxOrganization.Client.Latest.Departments.DataOwnerDto)">
            <summary>
            Insert Data Owner
            </summary>
            <param name="dataOwnerDto"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.DataOwnersController.GetDataOnwer(System.Int32)">
            <summary>
            Get Data Owner
            </summary>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.DataOwnersController.UpdateDataOwner(System.Int32,cxOrganization.Client.Latest.Departments.DataOwnerDto)">
            <summary>
            Get Data Owners
            </summary>
            <returns></returns>
        </member>
        <member name="T:cxOrganization.WebServiceAPI.Controllers.DepartmentController">
            <summary>
            Department API controller
            </summary>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.DepartmentController.#ctor(cxOrganization.Domain.Services.IDepartmentService,cxPlatform.Core.Context.IWorkContext,cxPlatform.Data.Application.IApplicationService,cxOrganization.Domain.Services.IDepartmentTypeService,cxOrganization.Domain.Services.IHierarchyDepartmentService,cxOrganization.Domain.Services.IUserService,cxOrganization.Domain.Mappings.IDepartmentMappingService,cxOrganization.Domain.Mappings.IUserMappingService,cxOrganization.Domain.Services.IUserGroupService,cxOrganization.Domain.Repositories.IHierarchyDepartmentRepository)">
            <summary>
            Default controller
            </summary>
            <param name="departmentService"></param>
            <param name="workContext"></param>
            <param name="applicationService"></param>
            <param name="departmentTypeService"></param>
            <param name="hierarchyDepartmentService"></param>
            <param name="userService"></param>
            <param name="departmentMappingService"></param>
            <param name="userMappingService"></param>
            <param name="usergroupService"></param>
            <param name="hierarchyDepartmentRepository"></param>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.DepartmentController.GetDepartmentsByOwnerIdWithoutFilterCXToken(System.Int32,System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{cxPlatform.Client.ConexusBase.EntityStatusEnum},System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.String},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Int32,System.Int32,System.String,System.Web.OData.Query.ODataQueryOptions{cxPlatform.Client.ConexusBase.Latest.IdentityStatusDto})">
            <summary>
            Get departments by ownerId without filtering CXToken
            </summary>
            <param name="ownerId"></param>
            <param name="customerIds"></param>
            <param name="departmentIds"></param>
            <param name="departmentStatusEnums"></param>
            <param name="archetypeIds"></param>
            <param name="userIds"></param>
            <param name="extIds"></param>
            <param name="lastUpdatedBefore"></param>
            <param name="lastUpdatedAfter"></param>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <param name="orderBy"></param>
            <param name="queryOptions"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.DepartmentController.GetDepartmentByOwnerIdWithoutFilterCXToken(System.Int32,System.Int32)">
            <summary>
            Get department by ownerId without filtering CXToken
            </summary>
            <param name="ownerId"></param>
            <param name="departmentId"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.DepartmentController.GetUsersByOwnerAndDepIdWithoutFilterCXToken(System.Int32,System.Int32,System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{cxPlatform.Client.ConexusBase.EntityStatusEnum},System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Int32,System.Int32,System.String,System.Web.OData.Query.ODataQueryOptions{cxPlatform.Client.ConexusBase.Latest.IdentityStatusDto})">
            <summary>
            Get users by owner and department id without filtering CXToken
            </summary>
            <param name="ownerId"></param>
            <param name="departmentId"></param>
            <param name="customerIds"></param>
            <param name="userStatusEnums"></param>
            <param name="archetypeIds"></param>
            <param name="userIds"></param>
            <param name="ssnList"></param>
            <param name="extIds"></param>
            <param name="lastUpdatedBefore"></param>
            <param name="lastUpdatedAfter"></param>
            <param name="queryOptions"></param>
            <param name="orderBy"></param>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.DepartmentController.GetUserByOwnerAndDepIdWithoutFilterCXToken(System.Int32,System.Int32,System.Int32)">
            <summary>
            Get user by owner and department Id without filtering CxToken
            </summary>
            <param name="ownerId"></param>
            <param name="departmentId"></param>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.DepartmentController.GetUserGroupsByOwnerAndDepIdWithoutFilterCXToken(System.Int32,System.Int32,System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{cxPlatform.Client.ConexusBase.EntityStatusEnum},System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.String},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Int32,System.Int32,System.String,System.Web.OData.Query.ODataQueryOptions{cxPlatform.Client.ConexusBase.Latest.IdentityStatusDto})">
            <summary>
            Get user groups by owner and department id without filtering CXToken
            </summary>
            <param name="ownerId"></param>
            <param name="departmentId"></param>
            <param name="customerIds"></param>
            <param name="userIds"></param>
            <param name="userGroupIds"></param>
            <param name="userGroupStatusEnums"></param>
            <param name="archetypeIds"></param>
            <param name="extIds"></param>
            <param name="lastUpdatedBefore"></param>
            <param name="lastUpdatedAfter"></param>
            <param name="queryOptions"></param>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <param name="orderBy"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.DepartmentController.GetUserGroupByOwnerAndDepIdWithoutFilterCXToken(System.Int32,System.Int32,System.Int32)">
            <summary>
            Get user group by owner and department id without filtering CXToken
            </summary>
            <param name="ownerId"></param>
            <param name="departmentId"></param>
            <param name="userGroupId"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.DepartmentController.GetDepartmentTypesOfDepartment(System.Int32,System.Int32,System.Collections.Generic.List{cxPlatform.Client.ConexusBase.ArchetypeEnum},System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.String},System.Web.OData.Query.ODataQueryOptions{cxPlatform.Client.ConexusBase.Latest.IdentityStatusDto})">
            <summary>
            Get department types of department
            </summary>
            <param name="ownerId"></param>
            <param name="departmentId"></param>
            <param name="departmentTypeArchetypeIds"></param>
            <param name="departmentTypeIds"></param>
            <param name="extIds"></param>
            <param name="queryOptions"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.DepartmentController.GetDepartmentTypeOfDepartment(System.Int32,System.Int32,System.Int32)">
            <summary>
            Get Department Type of department
            </summary>
            <param name="ownerId"></param>
            <param name="departmentId"></param>
            <param name="departmentTypeId"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.DepartmentController.GetDepartmentsById(System.Int32,System.String,System.Nullable{System.Int32})">
            <summary>
            Returns all class identifiers for a school id
            </summary>
            <param name="departmentId"></param>
            <param name="status">if status parameter is provided, result will be filtered on status. Default only active classes will be returned if no status is provided. For example: status=active, status=inactive, status=all</param>
            <param name="customer">if customer parameter is provided, result will be filtered on customer</param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.DepartmentController.GetUsersByDepartmentId(System.Int32,System.Nullable{System.Int32},System.Boolean,System.Boolean)">
            <summary>
            Returns identifiers for all users by department id
            </summary>
            <param name="departmentId"></param>
            <param name="customer"></param>
            <param name="includesubdepartments">including users in all sub-departments if parameter includesubdepartments is sent</param>
            <param name="includelinkedusers">include users having department (hierarchy) as linked department through U_D if includelinkedusers is sent</param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.DepartmentController.GetUsersByDepartmentExtId(System.String,System.Nullable{System.Int32},System.Boolean,System.Boolean)">
            <summary>
            Returns identifiers for all users by department external id
            </summary>
            <param name="departmentExtId"></param>
            <param name="customer"></param>
            <param name="includesubdepartments">including users in all sub-departments if parameter includesubdepartments is sent</param>
            <param name="includelinkedusers">include users having department (hierarchy) as linked department through U_D if includelinkedusers is sent</param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.DepartmentController.GetClassesBySchoolId(System.Int32,System.String,System.Nullable{System.Int32})">
            <summary>
            Returns all class identifiers for a school id
            </summary>
            <param name="departmentId"></param>
            <param name="status">if status parameter is provided, result will be filtered on status. Default only active classes will be returned if no status is provided. For example: status=active, status=inactive, status=all</param>
            <param name="customer">if customer parameter is provided, result will be filtered on customer</param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.DepartmentController.GetClassesBySchoolExtId(System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Returns all class identifiers for a school external id
            </summary>
            <param name="departmentExtId"></param>
            <param name="status">if status parameter is provided, result will be filtered on status. Default only active classes will be returned if no status is provided. For example: status=active, status=inactive, status=all</param>
            <param name="customer">if customer parameter is provided, result will be filtered on customer</param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.DepartmentController.GetUserGroups(System.Int32)">
            <summary>
            Returns all teaching groups identifiers for a school id
            </summary>
            <param name="departmentId"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.DepartmentController.UpdateDepartmentLastSyncData(System.Int32,System.Collections.Generic.List{cxPlatform.Client.ConexusBase.Latest.IdentityStatusDto})">
            <summary>
            Update department identifiers last sync date
            </summary>
            <param name="departmentId"></param>
            <param name="departments"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.DepartmentController.UpdateUsersLastSyncData(System.Int32,System.Collections.Generic.List{cxPlatform.Client.ConexusBase.Latest.IdentityStatusDto})">
            <summary>
            Update department identifiers last sync date
            </summary>
            <param name="departmentId"></param>
            <param name="users"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.DepartmentController.UpdateUserGroupLastSyncData(System.Int32,System.Collections.Generic.List{cxPlatform.Client.ConexusBase.Latest.IdentityStatusDto})">
            <summary>
            Update department identifiers last sync date
            </summary>
            <param name="departmentId"></param>
            <param name="usergroups"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.DepartmentController.GetHierarchyDepartmentByDepartmentId(System.Int32)">
            <summary>
            Get list hierarchy department by user
            </summary>
            <param name="departmentid"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.DepartmentController.GetHierarchyDepartmentsByDepartmentIdWithoutFilterCXToken(System.Int32,System.Int32)">
            <summary>
            Get list hierarchy department by user
            </summary>
            <param name="departmentid"></param>
            <param name="ownerid"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.DepartmentController.GetHierarchyDepartmentByDepartmentExtId(System.String)">
            <summary>
            Get list hierarchy department by user
            </summary>
            <param name="departmentextid"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.DepartmentController.GetHierarchyDepartmentsByDepartmentExtIdWithoutFilterCXToken(System.Int32,System.String)">
            <summary>
            Get list hierarchy department by user
            </summary>
            <param name="departmentextid"></param>
            <param name="ownerid"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.DepartmentController.UpdateDepartmentLastSyncDate(System.Int32,System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.Int32})">
            <summary>
            Update department last sync 
            </summary>
            <param name="ownerid"></param>
            <param name="userid"></param>
            <param name="customerIds"></param>
            <param name="archetypeids"></param>
            <param name="extids"></param>
            <param name="departmentIds"></param>
            <returns></returns>
        </member>
        <member name="T:cxOrganization.WebServiceAPI.Controllers.DepartmentStatus">
            <summary>
            Department status text
            </summary>
        </member>
        <member name="F:cxOrganization.WebServiceAPI.Controllers.DepartmentStatus.InActive">
            <summary>
            Inactive department status
            </summary>
        </member>
        <member name="F:cxOrganization.WebServiceAPI.Controllers.DepartmentStatus.All">
            <summary>
            All statuses
            </summary>
        </member>
        <member name="T:cxOrganization.WebServiceAPI.Controllers.ElmahController">
            <summary>
            Elmah Controller
            </summary>
        </member>
        <member name="T:cxOrganization.WebServiceAPI.Controllers.EmployeesController">
            <summary>
            Employee API 
            </summary>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.EmployeesController.#ctor(System.Func{System.String,cxOrganization.Domain.Services.IUserService},cxPlatform.Core.Context.IWorkContext,System.Func{System.String,cxOrganization.Domain.Services.IUserTypeService},cxOrganization.Domain.Services.ILoginServiceUserService)">
            <summary>
            Constructor
            </summary>
            <param name="userService"></param>
            <param name="workContext"></param>
            <param name="userTypeService"></param>
            <param name="loginServiceUserService"></param>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.EmployeesController.GetEmployees(System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{cxPlatform.Client.ConexusBase.EntityStatusEnum},System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.Int32},System.Boolean,System.Int32,System.Int32,System.String,System.Web.OData.Query.ODataQueryOptions{cxOrganization.Client.Latest.Users.EmployeeDto})">
            <summary>
            Get employees by parameters
            </summary>
            <param name="employeeIds"></param>
            <param name="userGroupIds"></param>
            <param name="parentDepartmentIds"></param>
            <param name="statusEnums">Employee status enum, default is active</param>
            <param name="extIds"></param>
            <param name="ssnList"></param>
            <param name="getLoginServiceClaims"></param>
            <param name="ssn"></param>
            <param name="lastUpdatedBefore"></param>
            <param name="lastUpdatedAfter"></param>
            <param name="queryOptions"></param>
            <param name="getDynamicProperties"></param>
            <param name="orderBy"></param>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <param name="loginServiceIds"></param>
            <param name="selectIdentity"></param>
            <param name="userNames"></param>
            <param name="loginServiceClaims"></param>
            <param name="loginServiceClaimTypes"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.EmployeesController.InsertEmployee(cxOrganization.Client.Latest.Users.EmployeeDto)">
            <summary>
            Insert Employee
            </summary>
            <param name="employeeDto"></param>
            <returns>A list of response Employee Dto </returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.EmployeesController.GetEmployeeDto(System.Int32)">
            <summary>
             Get Employee
            </summary>
            <param name="employeeid"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.EmployeesController.UpdateEmployeeInfo(System.Int32,cxOrganization.Client.Latest.Users.EmployeeDto,System.Boolean)">
            <summary>
            Update employee info
            </summary>
            <param name="employeeid"></param>
            <param name="employeeDto"></param>
            <param name="skipCheckingEntityVersion"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.EmployeesController.GetEmployeeMemberships(System.Int32,System.Collections.Generic.List{cxPlatform.Client.ConexusBase.ArchetypeEnum},System.Collections.Generic.List{cxPlatform.Client.ConexusBase.EntityStatusEnum},System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.String})">
            <summary>
            Get Employee's memberships
            </summary>
            <param name="employeeId"></param>
            <param name="archetypeIds">membership archetype enum</param>
            <param name="statusIds">membership status enum</param>
            <param name="membershipIds"></param>
            <param name="membershipExtIds"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.EmployeesController.AddRoleToEmployee(System.Int32,cxOrganization.Client.Latest.MemberDto)">
            <summary>
            Add role to employee
            </summary>
            <param name="employeeId"></param>
            <param name="memberDto">Holding role info</param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.EmployeesController.RemoveEmployeeRole(System.Int32,cxOrganization.Client.Latest.MemberDto)">
            <summary>
            Remove employee role
            </summary>
            <param name="employeeId"></param>
            <param name="memberDto">Holding role info</param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.EmployeesController.InsertEmployeesOnSchoolOwner(System.Int32,System.Collections.Generic.List{cxOrganization.Client.Latest.Users.EmployeeDto})">
            <summary>
            Insert Employee to school owner
            </summary>
            <param name="schoolownerid"></param>
            <param name="employees"></param>
            <returns>A list of response Employee Dto </returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.EmployeesController.InsertEmployeeOnDataOwner(System.Int32,cxOrganization.Client.Latest.Users.EmployeeDto)">
            <summary>
            Insert Employee to data owner
            </summary>
            <param name="dataownerid"></param>
            <param name="employeeDto"></param>
            <returns>A list of response Employee Dto </returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.EmployeesController.InsertEmployeesOnSchool(System.Int32,System.Int32,System.Collections.Generic.List{cxOrganization.Client.Latest.Users.EmployeeDto})">
            <summary>
            Insert Employee to school owner
            </summary>
            <param name="schoolownerid"></param>
            <param name="schoolid"></param>
            <param name="employees"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.EmployeesController.InsertEmployeesOnCompany(System.Int32,System.Int32,cxOrganization.Client.Latest.Users.EmployeeDto)">
            <summary>
            Insert Employee to company
            </summary>
            <param name="dataownerid"></param>
            <param name="companyid"></param>
            <param name="employeeDto"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.EmployeesController.GetEmployeesOnSchoolOwner(System.Int32)">
            <summary>
            Get Employees from school owner
            </summary>
            <param name="schoolownerid"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.EmployeesController.GetEmployeesOnDataOwner(System.Int32)">
            <summary>
            Get Employees from data owner
            </summary>
            <param name="dataownerid"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.EmployeesController.GetEmployeeOnSchoolOwner(System.Int32,System.Int32)">
            <summary>
             Get Employee from school owner
            </summary>
            <param name="schoolownerid"></param>
            <param name="employeeid"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.EmployeesController.GetEmployeeOnDataOwner(System.Int32,System.Int32)">
            <summary>
             Get Employee from data owner
            </summary>
            <param name="dataownerid"></param>
            <param name="employeeid"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.EmployeesController.GetEmployeeOnSchool(System.Int32,System.Int32,System.Int32)">
            <summary>
             Get Employee from school 
            </summary>
            <param name="schoolownerid"></param>
            <param name="schoolid"></param>
            <param name="employeeid"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.EmployeesController.GetEmployeeOnCompany(System.Int32,System.Int32,System.Int32)">
            <summary>
             Get Employee from company 
            </summary>
            <param name="dataownerid"></param>
            <param name="companyid"></param>
            <param name="employeeid"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.EmployeesController.GetEmployeesOnSchool(System.Int32,System.Int32)">
            <summary>
            Get Employees from school
            </summary>
            <param name="schoolownerid"></param>
            <param name="schoolid"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.EmployeesController.GetEmployeesOnCompany(System.Int32,System.Int32)">
            <summary>
            Get Employees from company
            </summary>
            <param name="dataownerid"></param>
            <param name="companyid"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.EmployeesController.UpdateEmployeeOnSchoolOwner(System.Int32,System.Int32,cxOrganization.Client.Latest.Users.EmployeeDto)">
            <summary>
            Update Employee from school owner
            </summary>
            <param name="employeeid"></param>
            <param name="schoolownerid"></param>
            <param name="employeeDto"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.EmployeesController.UpdateEmployeeOnDataOwner(System.Int32,System.Int32,cxOrganization.Client.Latest.Users.EmployeeDto)">
            <summary>
            Update Employee from data owner
            </summary>
            <param name="employeeid"></param>
            <param name="dataownerid"></param>
            <param name="employeeDto"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.EmployeesController.UpdateEmployeeOnSchool(System.Int32,System.Int32,System.Int32,cxOrganization.Client.Latest.Users.EmployeeDto)">
            <summary>
            Update Employee from school 
            </summary>
            <param name="employeeid"></param>
            <param name="schoolid"></param>
            <param name="schoolownerid"></param>
            <param name="employeeDto"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.EmployeesController.UpdateEmployeeOnCompany(System.Int32,System.Int32,System.Int32,cxOrganization.Client.Latest.Users.EmployeeDto)">
            <summary>
            Update Employee from company 
            </summary>
            <param name="employeeid"></param>
            <param name="companyid"></param>
            <param name="dataownerid"></param>
            <param name="employeeDto"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.EmployeesController.GetEmployeeMembership(System.Int32,System.Int32,System.Int32)">
            <summary>
            Get employee membership on school
            </summary>
            <param name="schoolownerid"></param>
            <param name="schoolid"></param>
            <param name="employeeid"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.EmployeesController.GetEmployeeMembershipOnCompany(System.Int32,System.Int32,System.Int32)">
            <summary>
            Get employee membership on company
            </summary>
            <param name="dataownerid"></param>
            <param name="companyid"></param>
            <param name="employeeid"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.EmployeesController.GetEmployeeStatus(System.Int32,System.Int32,System.Int32)">
            <summary>
            Get employee status
            </summary>
            <param name="schoolownerid"></param>
            <param name="schoolid"></param>
            <param name="employeeid"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.EmployeesController.InsertLoginServiceClaim(cxOrganization.Client.Latest.Users.LoginServiceUserDto)">
            <summary>
            Insert loginServiceUser that contains claim value for a employee in a login service.
            </summary>
            <param name="loginServiceUser"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.EmployeesController.UpdateLoginServiceClaim(cxOrganization.Client.Latest.Users.LoginServiceUserDto)">
            <summary>
            Update loginServiceUser that contains claim value for a employee in a login service.
            </summary>
            <param name="loginServiceUser"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.EmployeesController.DeleteLoginServiceClaim(cxOrganization.Client.Latest.Users.LoginServiceUserDto)">
            <summary>
            Delete loginServiceUser that contains claim value for a employee in a login service.
            </summary>
            <param name="loginServiceUser"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.EmployeesController.GetLoginServiceClaims(System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.String},System.Collections.Generic.List{cxPlatform.Client.ConexusBase.EntityStatusEnum},System.Collections.Generic.List{System.Int32},System.Nullable{System.Boolean},System.Collections.Generic.List{System.String},System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Get list of loginServiceUser of employee based on given parameters
            </summary>
            <returns></returns>
        </member>
        <member name="T:cxOrganization.WebServiceAPI.Controllers.ConnectionsController">
            <summary>
            Flag group API 
            </summary>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.ConnectionsController.#ctor(cxPlatform.Core.Context.IWorkContext,cxOrganization.Business.Connection.IConnectionService)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.ConnectionsController.GetConnections(cxOrganization.Business.Connection.ConnectionType,System.Collections.Generic.List{cxPlatform.Client.ConexusBase.ArchetypeEnum},System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.Collections.Generic.List{cxPlatform.Client.ConexusBase.ArchetypeEnum},System.Collections.Generic.List{cxPlatform.Client.ConexusBase.EntityStatusEnum},System.Collections.Generic.List{cxPlatform.Client.ConexusBase.ArchetypeEnum},System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.String},System.Collections.Generic.List{cxPlatform.Client.ConexusBase.EntityStatusEnum},System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.Collections.Generic.List{cxPlatform.Client.ConexusBase.ArchetypeEnum},System.Collections.Generic.List{cxOrganization.Domain.Enums.AgeRange},System.Collections.Generic.List{cxOrganization.Domain.Enums.Gender},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Get list connections for a specific type
            </summary>
            <param name="connectionType"></param>
            <param name="sourceArchetypes"></param>
            <param name="sourceIds"></param>
            <param name="sourceExtIds"></param>
            <param name="sourceReferrerTokens"></param>
            <param name="sourceReferrerResources"></param>
            <param name="sourceReferrerArchetypes"></param>
            <param name="referercxTokens"></param>
            <param name="sourceStatuses"></param>
            <param name="memberArchetypes"></param>
            <param name="memberIds"></param>
            <param name="memberExtIds"></param>
            <param name="memberStatuses"></param>
            <param name="memberReferrerTokens"></param>
            <param name="memberReferrerResources"></param>
            <param name="memberReferrerArchetypes"></param>
            <param name="memberGenders"></param>
            <param name="validFromBefore"></param>
            <param name="validFromAfter"></param>
            <param name="validToBefore"></param>
            <param name="validToAfter"></param>
            <param name="includeMember"></param>
            <param name="memberAgeRanges"></param>
            <param name="countOnMember"></param>
            <param name="includeConnectionHasNoMember"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.ConnectionsController.GetConnectionWithMultipleTypes(System.Collections.Generic.List{cxOrganization.Business.Connection.ConnectionType},System.Collections.Generic.List{cxPlatform.Client.ConexusBase.ArchetypeEnum},System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.Collections.Generic.List{cxPlatform.Client.ConexusBase.ArchetypeEnum},System.Collections.Generic.List{cxPlatform.Client.ConexusBase.EntityStatusEnum},System.Collections.Generic.List{cxPlatform.Client.ConexusBase.ArchetypeEnum},System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.String},System.Collections.Generic.List{cxPlatform.Client.ConexusBase.EntityStatusEnum},System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.Collections.Generic.List{cxPlatform.Client.ConexusBase.ArchetypeEnum},System.Collections.Generic.List{cxOrganization.Domain.Enums.AgeRange},System.Collections.Generic.List{cxOrganization.Domain.Enums.Gender},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Get list connections for multiple types
            </summary>
            <param name="connectionTypes"></param>
            <param name="sourceArchetypes"></param>
            <param name="sourceIds"></param>
            <param name="sourceExtIds"></param>
            <param name="sourceReferrerTokens"></param>
            <param name="sourceReferrerResources"></param>
            <param name="sourceReferrerArchetypes"></param>
            <param name="referercxTokens"></param>
            <param name="sourceStatuses"></param>
            <param name="memberArchetypes"></param>
            <param name="memberIds"></param>
            <param name="memberExtIds"></param>
            <param name="memberStatuses"></param>
            <param name="memberReferrerTokens"></param>
            <param name="memberReferrerResources"></param>
            <param name="memberReferrerArchetypes"></param>
            <param name="memberGenders"></param>
            <param name="validFromBefore"></param>
            <param name="validFromAfter"></param>
            <param name="validToBefore"></param>
            <param name="validToAfter"></param>
            <param name="includeMember"></param>
            <param name="memberAgeRanges"></param>
            <param name="countOnMember"></param>
            <param name="includeConnectionHasNoMember"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.ConnectionsController.GetConnectionMembers(cxOrganization.Business.Connection.ConnectionType,System.Collections.Generic.List{cxPlatform.Client.ConexusBase.ArchetypeEnum},System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.Collections.Generic.List{cxPlatform.Client.ConexusBase.ArchetypeEnum},System.Collections.Generic.List{cxPlatform.Client.ConexusBase.EntityStatusEnum},System.Collections.Generic.List{cxPlatform.Client.ConexusBase.ArchetypeEnum},System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.Int64},System.Collections.Generic.List{System.String},System.Collections.Generic.List{cxPlatform.Client.ConexusBase.EntityStatusEnum},System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.Collections.Generic.List{cxPlatform.Client.ConexusBase.ArchetypeEnum},System.Collections.Generic.List{cxOrganization.Domain.Enums.AgeRange},System.Collections.Generic.List{cxOrganization.Domain.Enums.Gender},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Int32,System.Int32,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Get list connection members in a specific types
            </summary>
            <param name="connectionType">Type of connection</param>
            <param name="sourceArchetypes">List of archetype of connection source which the member belong to</param>
            <param name="sourceIds">List of identities of connection source which the member belong to</param>
            <param name="sourceExtIds">List of external identities of connection source which the member belong to</param>
            <param name="sourceReferrerTokens">List of referrer tokens of connection source which the member belong to</param>
            <param name="sourceReferrerResources">List of referrer tokens of connection source which the member belong to</param>
            <param name="sourceReferrerArchetypes">List of referrer tokens of connection source which the member belong to</param>
            <param name="sourceStatuses">List of entity statues of connection source which the member belong to</param>
            <param name="memberArchetypes">List of archetypes of user that is member in connection</param>
            <param name="memberIds">List of identity of user that is member in connection</param>
            <param name="memberExtIds">List of external identities of user that is member in connection</param>
            <param name="ids">List of identities of connection member</param>
            <param name="extIds">List of external identities of connection member</param>
            <param name="memberStatuses">List of statuses of connection member</param>
            <param name="memberReferrerTokens">List of referrer tokes of connection member</param>
            <param name="memberReferrerResources">List of referrer resources of connection member</param>
            <param name="memberReferrerArchetypes">List of referrer archetypes of connection member</param>
            <param name="memberAgeRanges">List of age ranges of user that is member in connection</param>
            <param name="memberGenders">List of genders of user that is member in connection</param>   
            <param name="validFromBefore">The date time value when connection member has valid-from less than or equal</param>
            <param name="validFromAfter">The date time value when connection member has valid-from greater than or equal</param>
            <param name="validToBefore">The date time value when connection member has valid-to less than or equal</param>
            <param name="validToAfter">The date time value when connection member has valid-to greater than or equal</param>
            <param name="createdAfter">The date time value when connection member has created date greater than or equal</param>
            <param name="createdBefore">The date time value when connection member has created date less than or equal</param>
            <param name="lastUpdatedAfter">The date time value when connection member has last updated date greater than or equal</param>
            <param name="lastUpdatedBefore">The date time value when connection member has last updated date less than or equal</param>
            <param name="pageIndex">Page index</param>
            <param name="pageSize">Page size</param>
            <param name="orderBy">Order by  expression</param>
            <param name="includeConnectionSource">set true include connection source for each member</param>
            <param name="getTotalItemCount">Set true to get total item count</param>
            <param name="distinct">Set true to get distinct member (the latest member grouped by user and referrer info)</param>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.ConnectionsController.GetConnectionMembersWithMultipleTypes(System.Collections.Generic.List{cxOrganization.Business.Connection.ConnectionType},System.Collections.Generic.List{cxPlatform.Client.ConexusBase.ArchetypeEnum},System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.Collections.Generic.List{cxPlatform.Client.ConexusBase.ArchetypeEnum},System.Collections.Generic.List{cxPlatform.Client.ConexusBase.EntityStatusEnum},System.Collections.Generic.List{cxPlatform.Client.ConexusBase.ArchetypeEnum},System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.Int64},System.Collections.Generic.List{System.String},System.Collections.Generic.List{cxPlatform.Client.ConexusBase.EntityStatusEnum},System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.Collections.Generic.List{cxPlatform.Client.ConexusBase.ArchetypeEnum},System.Collections.Generic.List{cxOrganization.Domain.Enums.AgeRange},System.Collections.Generic.List{cxOrganization.Domain.Enums.Gender},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Int32,System.Int32,System.String,System.Boolean,System.Boolean)">
            <summary>
            Get list connection members
            </summary>
            <param name="connectionTypes">List of connection types</param>
            <param name="sourceArchetypes">List of archetype of connection source which the member belong to</param>
            <param name="sourceIds">List of identities of connection source which the member belong to</param>
            <param name="sourceExtIds">List of external identities of connection source which the member belong to</param>
            <param name="sourceReferrerTokens">List of referrer tokens of connection source which the member belong to</param>
            <param name="sourceReferrerResources">List of referrer tokens of connection source which the member belong to</param>
            <param name="sourceReferrerArchetypes">List of referrer tokens of connection source which the member belong to</param>
            <param name="sourceStatuses">List of entity statues of connection source which the member belong to</param>
            <param name="memberArchetypes">List of archetypes of user that is member in connection</param>
            <param name="memberIds">List of identity of user that is member in connection</param>
            <param name="memberExtIds">List of external identities of user that is member in connection</param>
            <param name="ids">List of identities of connection member</param>
            <param name="extIds">List of external identities of connection member</param>
            <param name="memberStatuses">List of statuses of connection member</param>
            <param name="memberReferrerTokens">List of referrer tokes of connection member</param>
            <param name="memberReferrerResources">List of referrer resources of connection member</param>
            <param name="memberReferrerArchetypes">List of referrer archetypes of connection member</param>
            <param name="memberAgeRanges">List of age ranges of user that is member in connection</param>
            <param name="memberGenders">List of genders of user that is member in connection</param>   
            <param name="validFromBefore">The date time value when connection member has valid-from less than or equal</param>
            <param name="validFromAfter">The date time value when connection member has valid-from greater than or equal</param>
            <param name="validToBefore">The date time value when connection member has valid-to less than or equal</param>
            <param name="validToAfter">The date time value when connection member has valid-to greater than or equal</param>
            <param name="createdAfter">The date time value when connection member has created date greater than or equal</param>
            <param name="createdBefore">The date time value when connection member has created date less than or equal</param>
            <param name="lastUpdatedAfter">The date time value when connection member has last updated date greater than or equal</param>
            <param name="lastUpdatedBefore">The date time value when connection member has last updated date less than or equal</param>
            <param name="pageIndex">Page index</param>
            <param name="pageSize">Page size</param>
            <param name="orderBy">Order by  expression</param>
            <param name="includeConnectionSource">set true include connection source for each member</param>
            <param name="getTotalItemCount">Set true to get total item count</param>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.ConnectionsController.GetLatestConnectionMembers(cxOrganization.WebServiceAPI.Models.ConnectionMemberFilter)">
            <summary>
            Get list connection members
            </summary>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.ConnectionsController.InsertConnections(System.Collections.Generic.List{cxOrganization.Business.Connection.ConnectionDto})">
            <summary>
            Insert a collection of connection. 
            For each connection, we will create connection source if not existing and add connection member(s) into connection source
            </summary>
            <param name="connections"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.ConnectionsController.InsertConnectionSources(System.Collections.Generic.List{cxOrganization.Business.Connection.ConnectionDtoBase})">
            <summary>
            Insert a collection of connection source. 
            For each connection, we will create connection source if not existing
            </summary>
            <param name="connectionSources"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.ConnectionsController.UpdateConnections(System.Collections.Generic.List{cxOrganization.Business.Connection.ConnectionDto},System.Boolean)">
            <summary>
            Update a collection of existing connection. 
            For each connection, we will update connection source if parameter updateSource=true and update connection member(s)(only update membership info, do not update user info) 
            </summary> 
            <param name="connectionDtos"></param>
            <param name="updateSource">Set true to update connection source also</param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.ConnectionsController.UpdateConnectionSources(System.Collections.Generic.List{cxOrganization.Business.Connection.ConnectionDtoBase})">
            <summary>
            Update a collection of existing connection source. 
            </summary>
            <param name="connectionSources"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.ConnectionsController.GetConnectionSources(System.Collections.Generic.List{cxOrganization.Business.Connection.ConnectionType},System.Collections.Generic.List{cxPlatform.Client.ConexusBase.ArchetypeEnum},System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.Collections.Generic.List{cxPlatform.Client.ConexusBase.ArchetypeEnum},System.Collections.Generic.List{cxPlatform.Client.ConexusBase.EntityStatusEnum},System.Collections.Generic.List{cxPlatform.Client.ConexusBase.ArchetypeEnum},System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.String},System.Collections.Generic.List{cxPlatform.Client.ConexusBase.EntityStatusEnum},System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.Collections.Generic.List{cxPlatform.Client.ConexusBase.ArchetypeEnum},System.Collections.Generic.List{cxOrganization.Domain.Enums.AgeRange},System.Collections.Generic.List{cxOrganization.Domain.Enums.Gender},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Boolean,System.Boolean)">
            <summary>
            Get list connections
            </summary>
            <param name="connectionTypes"></param>
            <param name="sourceArchetypes"></param>
            <param name="sourceIds"></param>
            <param name="sourceExtIds"></param>
            <param name="sourceReferrerTokens"></param>
            <param name="sourceReferrerResources"></param>
            <param name="sourceReferrerArchetypes"></param>
            <param name="referercxTokens"></param>
            <param name="sourceStatuses"></param>
            <param name="memberArchetypes"></param>
            <param name="memberIds"></param>
            <param name="memberExtIds"></param>
            <param name="memberStatuses"></param>
            <param name="memberReferrerTokens"></param>
            <param name="memberReferrerResources"></param>
            <param name="memberReferrerArchetypes"></param>
            <param name="memberGenders"></param>
            <param name="validFromBefore"></param>
            <param name="validFromAfter"></param>
            <param name="validToBefore"></param>
            <param name="validToAfter"></param>
            <param name="memberAgeRanges"></param>
            <param name="countOnMember"></param>
            <param name="includeConnectionHasNoMember"></param>
            <returns></returns>
        </member>
        <member name="T:cxOrganization.WebServiceAPI.Controllers.HomeController">
            <summary>
            Home controller
            </summary>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.HomeController.Index">
            <summary>
            Home controller
            </summary>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.ImportSchoolController.GetSchoolState(System.String)">
            <summary>
            Get school state when compare the import file with current status in the database to find out which one is new/updated...
            </summary>
            <param name="jsonString"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.ImportSchoolController.AnalyzeSchoolState(System.String)">
            <summary>
            Analyze school state
            </summary>
            <param name="jsonString"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.ImportSchoolController.ExecuteSchoolCommand(System.String)">
            <summary>
            Execute school command after analyze
            </summary>
            <param name="jsonString"></param>
            <returns></returns>
        </member>
        <member name="T:cxOrganization.WebServiceAPI.Controllers.LearnersController">
            <summary>
            Learner API 
            </summary>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.LearnersController.#ctor(System.Func{System.String,cxOrganization.Domain.Services.IUGMemberService},System.Func{System.String,cxOrganization.Domain.Services.IUserService},cxPlatform.Core.Context.IWorkContext,System.Func{System.String,cxOrganization.Domain.Services.IDepartmentService},System.Func{System.String,cxOrganization.Domain.Services.IUserTypeService},cxOrganization.Domain.Services.IClassMemberService,cxOrganization.Domain.Services.ILoginServiceUserService)">
            <summary>
            Constructor
            </summary>
            <param name="userService"></param>
            <param name="workContext"></param>
            <param name="departmentService"></param>
            <param name="userTypeService"></param>
            <param name="userGroupUserMemberService"></param>
            <param name="classMemberService"></param>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.LearnersController.GetLearners(System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{cxPlatform.Client.ConexusBase.EntityStatusEnum},System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.Int32},System.Boolean,System.Int32,System.Int32,System.String,System.Web.OData.Query.ODataQueryOptions{cxOrganization.Client.Latest.Users.LearnerDto})">
            <summary>
            Get learners
            </summary>
            <param name="learnerIds"></param>
            <param name="userGroupIds"></param>
            <param name="parentDepartmentIds"></param>
            <param name="statusEnums"> Learner StatusEnums: Unknown = 0, Active = 1, Inactive = 2, Deactive = 3, All = 99, default is active</param>
            <param name="lastUpdatedBefore"></param>
            <param name="lastUpdatedAfter"></param>
            <param name="queryOptions"></param>
            <param name="extIds"></param>
            <param name="ssnList"></param>
            <param name="getDynamicProperties"></param>
            <param name="loginServiceIds"></param>
            <param name="selectIdentity"></param>
            <param name="orderBy"></param>
            <param name="pageIndex"></param>
            <param name="extId">Will be removed</param>
            <param name="ssn">Will be removed</param>
            <param name="pageSize"></param>
            <param name="userNames"></param>
            <param name="getLoginServiceClaims"></param>
            <param name="loginServiceClaims"></param>
            <param name="loginServiceClaimTypes"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.LearnersController.InsertLearners(cxOrganization.Client.Latest.Users.LearnerDto)">
            <summary>
            Insert learner to school owner
            </summary>
            <param name="learnerDto"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.LearnersController.GetLearner(System.Int32)">
            <summary>
            Get learner
            </summary>
            <param name="learnerid"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.LearnersController.UpdateLearner(System.Int32,cxOrganization.Client.Latest.Users.LearnerDto,System.Boolean)">
            <summary>
            Update learner
            </summary>
            <param name="learnerid"></param>
            <param name="learnerDto"></param>
            <param name="skipCheckingEntityVersion"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.LearnersController.GetLearnerClass(System.Int32)">
            <summary>
            Get learner's class
            </summary>
            <param name="learnerid"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.LearnersController.GetLearnerLevel(System.Int32)">
            <summary>
            Get learner's level
            </summary>
            <param name="learnerid"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.LearnersController.GetLearnerMemberships(System.Int32,System.Collections.Generic.List{cxPlatform.Client.ConexusBase.ArchetypeEnum},System.Collections.Generic.List{cxPlatform.Client.ConexusBase.EntityStatusEnum},System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.String})">
            <summary>
            Get learner memberships
            </summary>
            <param name="learnerid"></param>
            <param name="archetypeIds">membership archetype enum</param>
            <param name="statusIds">membership status enum</param>
            <param name="membershipIds"></param>
            <param name="membershipExtIds"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.LearnersController.AddLearnerToTeachingGroup(System.Int32,cxOrganization.Client.Latest.MemberDto)">
            <summary>
            Make memberships for learner with teachinggroup
            </summary>
            <param name="learnerId"></param>
            <param name="memberDto"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.LearnersController.RemoveLearnerInTeachingGroup(System.Int32,cxOrganization.Client.Latest.MemberDto)">
            <summary>
            Remove memberships for learner with teachinggroup
            </summary>
            <param name="learnerId"></param>
            <param name="memberDto">This dto content required teaching group info </param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.LearnersController.UpdateLearnerLevel(System.Int32,cxOrganization.Client.Latest.MemberDto)">
            <summary>
            Update learner's level
            </summary>
            <param name="learnerId"></param>
            <param name="memberDto"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.LearnersController.DeleteUserTypeUser(System.Int32,cxOrganization.Client.Latest.MemberDto)">
            <summary>
            Remove learner's Level
            </summary>
            <param name="learnerId"></param>
            <param name="memberDto"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.LearnersController.UpdateLearnerClass(System.Int32,cxOrganization.Client.Latest.MemberDto)">
            <summary>
            Add learner to class
            </summary>
            <param name="learnerId"></param>
            <param name="memberDto"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.LearnersController.RemoveLearnerFromClass(System.Int32,cxOrganization.Client.Latest.MemberDto)">
            <summary>
            Remove learner from class, this learner will be moved to class's school
            </summary>
            <param name="learnerId"></param>
            <param name="memberDto"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.LearnersController.InsertLoginServiceClaim(cxOrganization.Client.Latest.Users.LoginServiceUserDto)">
            <summary>
            Insert loginServiceUser that contains claim value for a learner in a login service.
            </summary>
            <param name="loginServiceUser"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.LearnersController.UpdateLoginServiceClaim(cxOrganization.Client.Latest.Users.LoginServiceUserDto)">
            <summary>
            Update loginServiceUser that contains claim value for a learner in a login service.
            </summary>
            <param name="loginServiceUser"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.LearnersController.DeleteLoginServiceClaim(cxOrganization.Client.Latest.Users.LoginServiceUserDto)">
            <summary>
            Delete loginServiceUser that contains claim value for a learner in a login service.
            </summary>
            <param name="loginServiceUser"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.LearnersController.GetLoginServiceClaims(System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.String},System.Collections.Generic.List{cxPlatform.Client.ConexusBase.EntityStatusEnum},System.Collections.Generic.List{System.Int32},System.Nullable{System.Boolean},System.Collections.Generic.List{System.String},System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Get list of loginServiceUser of learner based on given parameters
            </summary>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.LearnersController.InsertLearnersOnSchoolOwner(System.Int32,System.Collections.Generic.List{cxOrganization.Client.Latest.Users.LearnerDto})">
            <summary>
            Insert learner to school owner
            </summary>
            <param name="schoolownerid"></param>
            <param name="learners"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.LearnersController.InsertLearnersOnSchool(System.Int32,System.Int32,System.Collections.Generic.List{cxOrganization.Client.Latest.Users.LearnerDto})">
            <summary>
            Insert learner to school
            </summary>
            <param name="schoolownerid"></param>
            <param name="schoolid"></param>
            <param name="learners"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.LearnersController.GetLearnersOnSchool(System.Int32,System.Int32)">
            <summary>
            get learner of school
            </summary>
            <param name="schoolownerid"></param>
            <param name="schoolid"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.LearnersController.GetLearnerOnSchool(System.Int32,System.Int32,System.Int32)">
            <summary>
            Get learner of school 
            </summary>
            <param name="schoolownerid"></param>
            <param name="schoolid"></param>
            <param name="learnerid"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.LearnersController.UpdateLearnerOnSchoolOwner(System.Int32,System.Int32,cxOrganization.Client.Latest.Users.LearnerDto)">
            <summary>
            Update learner of school owner
            </summary>
            <param name="learnerid"></param>
            <param name="schoolownerid"></param>
            <param name="learnerDto"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.LearnersController.UpdateLearnerOnSchool(System.Int32,System.Int32,System.Int32,cxOrganization.Client.Latest.Users.LearnerDto)">
            <summary>
            Update learner of school 
            </summary>
            <param name="learnerid"></param>
            <param name="schoolid"></param>
            <param name="schoolownerid"></param>
            <param name="learnerDto"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.LearnersController.GetLearnerMembership(System.Int32,System.Int32,System.Int32)">
            <summary>
            Get learner memberships
            </summary>
            <param name="schoolownerid"></param>
            <param name="schoolid"></param>
            <param name="learnerid"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.LearnersController.GetLearnerStatus(System.Int32,System.Int32,System.Int32)">
            <summary>
            Get learner status
            </summary>
            <param name="schoolownerid"></param>
            <param name="schoolid"></param>
            <param name="learnerid"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.LearnersMoverController.#ctor(System.Func{System.String,cxOrganization.Domain.Services.IUserService},cxPlatform.Core.Context.IWorkContext,System.Func{System.String,cxOrganization.Domain.Services.IDepartmentService})">
            <summary>
            Contructor
            </summary>
            <param name="userService"></param>
            <param name="workContext"></param>
            <param name="departmentService"></param>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.LearnersMoverController.MoveLearnersToSchool(System.Int32,System.Collections.Generic.List{System.Int32})">
            <summary>
            Move learners to school
            </summary>
            <param name="schoolid"></param>
            <param name="learnerIds"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.LearnersMoverController.MoveLearnersToClass(System.Int32,System.Collections.Generic.List{System.Int32})">
            <summary>
            Move learners to class
            </summary>
            <param name="classid"></param>
            <param name="learnerIds"></param>
            <returns></returns>
        </member>
        <member name="T:cxOrganization.WebServiceAPI.Controllers.LevelsController">
            <summary>
            Level api: manage members of classes/schools
            </summary>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.LevelsController.#ctor(cxPlatform.Core.Context.IWorkContext,cxOrganization.Domain.Services.ILevelService,cxOrganization.Domain.Services.IUserTypeService,System.Func{System.String,cxOrganization.Domain.Services.IUserService},System.Func{System.String,cxOrganization.Domain.Services.IDepartmentService})">
            <summary>
            Constructor
            </summary>
            <param name="levelService"></param>
            <param name="workContext"></param>
            <param name="userTypeService"></param>
            <param name="userService"></param>
            <param name="departmentService"></param>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.LevelsController.GetLevelByExtId(System.String)">
            <summary>
            Get level
            </summary>
            <param name="levelid"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.LevelsController.GetLearnersByLevel(System.String,System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.String},System.Collections.Generic.List{cxPlatform.Client.ConexusBase.EntityStatusEnum},System.Collections.Generic.List{System.String},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Boolean,System.Int32,System.Int32,System.String,System.Web.OData.Query.ODataQueryOptions{cxOrganization.Client.Latest.Users.LearnerDto})">
            <summary>
            Get all learners that have the entered level
            </summary>
            <param name="levelid"></param>
            <param name="learnerIds"></param>
            <param name="learnerExtIds"></param>
            <param name="learnerStatusEnums"></param>
            <param name="learnerSsnList"></param>
            <param name="learnerLastUpdatedBefore"></param>
            <param name="learnerLastUpdatedAfter"></param>
            <param name="learnerParentDepartmentIds"></param>
            <param name="orderBy"></param>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <param name="queryOptions"></param>
            <param name="selectIdentity"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.LevelsController.GetLearnersByLevel(System.String,System.Int32)">
            <summary>
            Get the learner that have the entered level and identifier
            </summary>
            <param name="levelid"></param>
            <param name="learnerid"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.LevelsController.GetClassesByLevel(System.String)">
            <summary>
            Get all classes that have the entered level
            </summary>
            <param name="levelid"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.LevelsController.GetClassByLevel(System.String,System.Int32)">
            <summary>
            Get all classes that have the entered level
            </summary>
            <param name="levelid"></param>
            <param name="classid"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.LevelsController.AddMembers(System.Int32,System.Int32,System.String,cxOrganization.Client.Latest.MemberDto)">
            <summary>
            Add Level member (This endpoint is obsolete)
            </summary>
            <param name="schoolownerid"></param>
            <param name="schoolid"></param>
            <param name="levelid"></param>
            <param name="memberDto"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.LevelsController.GetMemberships(System.Int32,System.Int32,System.String)">
            <summary>
            Add Level member (This endpoint is obsolete)
            </summary>
            <param name="schoolownerid"></param>
            <param name="schoolid"></param>
            <param name="levelextid"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.LevelsController.GetMembers(System.Int32,System.Int32,System.String)">
            <summary>
            Get members as class (This endpoint is obsolete)
            </summary>
            <param name="schoolownerid"></param>
            <param name="schoolid"></param>
            <param name="levelid"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.LevelsController.GetMemberAsUser(System.Int32,System.Int32,System.String,System.Int32)">
            <summary>
             Get Learner as a level member (This endpoint is obsolete)
            </summary>
            <param name="schoolownerid"></param>
            <param name="schoolid"></param>
            <param name="levelid"></param>
            <param name="learnerid"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.LevelsController.GetMemberAsClass(System.Int32,System.Int32,System.String,System.Int32)">
            <summary>
             Get Class as a level member (This endpoint is obsolete)
            </summary>
            <param name="schoolownerid"></param>
            <param name="schoolid"></param>
            <param name="classid"></param>
            <param name="levelid"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.LevelsController.GetMemberAsTeachingGroup(System.Int32,System.Int32,System.String,System.Int32)">
            <summary>
             Get Teachinggroup as a level member (This endpoint is obsolete)
            </summary>
            <param name="schoolownerid"></param>
            <param name="schoolid"></param>
            <param name="teachinggroupid"></param>
            <param name="levelid"></param>
            <returns></returns>
        </member>
        <member name="T:cxOrganization.WebServiceAPI.Controllers.LinksController">
            <summary>
            Finds controllers
            </summary>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.LinksController.Monitor">
            <summary>
            GET Management link
            </summary>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.LinksController.Management">
            <summary>
               !!!! Need description !!!!
            </summary>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.OrganizationalUnitsController.#ctor(System.Func{System.String,cxOrganization.Domain.Services.IDepartmentService},cxPlatform.Core.Context.IWorkContext,System.Func{System.String,cxOrganization.Domain.Services.IUserService})">
            <summary>
            Controller constructor
            </summary>
            <param name="departmentService"></param>
            <param name="workContext"></param>
            <param name="userService"></param>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.OrganizationalUnitsController.GetOrganizationalUnits(System.Int32,System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.String},System.Collections.Generic.List{cxPlatform.Client.ConexusBase.EntityStatusEnum},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Boolean,System.Int32,System.Int32,System.String,System.Web.OData.Query.ODataQueryOptions{cxOrganization.Client.Latest.Departments.OrganizationalUnitDto})">
            <summary>
            Get organizationalunits
            </summary>
            <param name="userIds">Get class that have the userId</param>
            <param name="organizationalUnitIds"></param>
            <param name="statusEnums">Class StatusEnums: Default is Active</param>
            <param name="lastUpdatedBefore"></param>
            <param name="lastUpdatedAfter"></param>
            <param name="queryOptions"></param>
            <param name="organizationalUnitExtIds"></param>
            <param name="parentDepartmentId"></param>
            <param name="pageSize"></param>
            <param name="orderBy"></param>
            <param name="pageIndex"></param>
            <param name="selectIdentity"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.OrganizationalUnitsController.InsertOrganizationalUnit(cxOrganization.Client.Latest.Departments.OrganizationalUnitDto)">
            <summary>
            Insert organizationalunit
            </summary>
            <param name="organizationalUnitDto"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.OrganizationalUnitsController.GetOrganizationalUnit(System.Int32)">
            <summary>
            Get organizationalunit by identifier
            </summary>
            <param name="organizationalunitid"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.OrganizationalUnitsController.UpdateOrganizationalUnit(System.Int32,cxOrganization.Client.Latest.Departments.OrganizationalUnitDto)">
            <summary>
            Update organizationalunit
            </summary>
            <param name="organizationalunitid"></param>
            <param name="organizationalUnitDto"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.OrganizationalUnitsController.GetOrganizationalUnitEmployees(System.Int32,System.Collections.Generic.List{cxPlatform.Client.ConexusBase.EntityStatusEnum},System.Web.OData.Query.ODataQueryOptions{cxOrganization.Client.Latest.Users.EmployeeDto})">
            <summary>
            Get organizational unit's employees
            </summary>
            <param name="organizationalunitid"></param>
            <param name="statusEnums">employee status enums</param>
            <param name="queryOptions"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.OrganizationalUnitsController.GetOrganizationalUnitEmployee(System.Int32,System.Int32)">
            <summary>
            Get organizationalunit's employee by identifier
            </summary>
            <param name="organizationalunitid"></param>
            <param name="employeeid"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.RolesController.#ctor(cxOrganization.Domain.Services.IUserTypeService,cxPlatform.Core.Context.IWorkContext)">
            <summary>
            Constructor
            </summary>
            <param name="userTypeService"></param>
            <param name="workContext"></param>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.RolesController.GetRoles(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.Int32})">
            <summary>
            Get Roles
            </summary>
            <param name="extIds"></param>
            <param name="roleIds"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.RolesController.AddRoleToEmployee(System.Int32,cxOrganization.Client.Latest.MemberDto)">
            <summary>
            Add role to employee
            </summary>
            <param name="roleId"></param>
            <param name="employeeMemberDto"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.RolesController.RemoveEmployeeRole(System.Int32,cxOrganization.Client.Latest.MemberDto)">
            <summary>
            Remove employee role
            </summary>
            <param name="roleId"></param>
            <param name="employeeMemberDto"></param>
            <returns></returns>
        </member>
        <member name="T:cxOrganization.WebServiceAPI.Controllers.SchoolOwnersController">
            <summary>
            Schools owner API controller 
            </summary>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.SchoolOwnersController.#ctor(System.Func{System.String,cxOrganization.Domain.Services.IDepartmentService},System.Func{System.String,cxOrganization.Domain.Services.IUserService},cxPlatform.Core.Context.IWorkContext,cxOrganization.Domain.Services.IHierarchyDepartmentService)">
            <summary>
            Schools controller api
            </summary>
            <param name="departmentService"></param>
            <param name="workContext"></param>
            <param name="hierarchyDepartmentService"></param>
            <param name="userService"></param>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.SchoolOwnersController.GetSchoolOwners(System.Int32,System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.String},System.Collections.Generic.List{cxPlatform.Client.ConexusBase.EntityStatusEnum},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Boolean,System.Int32,System.Int32,System.String,System.Web.OData.Query.ODataQueryOptions{cxOrganization.Client.Latest.Departments.SchoolOwnerDto})">
            <summary>
            Get school owners 
            </summary>
            <param name="userIds"></param>
            <param name="schoolownerIds"></param>
            <param name="statusEnums">schoolowner StatusEnums</param>
            <param name="lastUpdatedBefore"></param>
            <param name="lastUpdatedAfter"></param>
            <param name="queryOptions"></param>
            <param name="pageSize"></param>
            <param name="pageIndex"></param>
            <param name="orderBy"></param>
            <param name="parentDepartmentId"></param>
            <param name="selectIdentity"></param>
            <param name="extIds"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.SchoolOwnersController.InsertSchoolOwner(cxOrganization.Client.Latest.Departments.SchoolOwnerDto)">
            <summary>
            Insert schools owner
            </summary>
            <param name="schoolOwnerDto"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.SchoolOwnersController.GetSchoolOwner(System.Int32)">
            <summary>
            Get school owner
            </summary>
            <param name="schoolownerid"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.SchoolOwnersController.UpdateSchoolOwner(System.Int32,cxOrganization.Client.Latest.Departments.SchoolOwnerDto)">
            <summary>
            Update school owner
            </summary>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.SchoolOwnersController.GetLearnersOnSchoolOwner(System.Int32,System.Collections.Generic.List{cxPlatform.Client.ConexusBase.EntityStatusEnum},System.Int32,System.Int32,System.String,System.Web.OData.Query.ODataQueryOptions{cxOrganization.Client.Latest.Users.LearnerDto})">
            <summary>
            Get school owner's learner
            </summary>
            <param name="schoolownerid"></param>
            <param name="statusEnums"></param>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <param name="orderBy"></param>
            <param name="queryOptions"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.SchoolOwnersController.GetLearnerOnSchoolOwner(System.Int32,System.Int32)">
            <summary>
            Get school owner's learner
            </summary>
            <param name="schoolownerid"></param>
            <param name="learnerid"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.SchoolOwnersController.GetClassesOnSchoolOwner(System.Int32,System.Collections.Generic.List{cxPlatform.Client.ConexusBase.EntityStatusEnum},System.Int32,System.Int32,System.String,System.Web.OData.Query.ODataQueryOptions{cxOrganization.Client.Latest.Departments.ClassDto})">
            <summary>
            Get school owner's classes
            </summary>
            <param name="schoolownerid"></param>
            <param name="statusEnums"> Class status enums,Default is Active</param>
            <param name="orderBy"></param>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <param name="queryOptions"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.SchoolOwnersController.GetClassOnSchoolOwner(System.Int32,System.Int32)">
            <summary>
            Get school owner's class
            </summary>
            <param name="schoolownerid"></param>
            <param name="classid"></param>
            <returns></returns>
        </member>
        <member name="T:cxOrganization.WebServiceAPI.Controllers.SchoolsController">
            <summary>
            Schools API 
            </summary>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.SchoolsController.#ctor(System.Func{System.String,cxOrganization.Domain.Services.IDepartmentService},System.Func{System.String,cxOrganization.Domain.Services.IUserService},cxOrganization.Domain.Services.IHierarchyDepartmentService,cxPlatform.Core.Context.IWorkContext)">
            <summary>
            Schools API
            </summary>
            <param name="departmentService"></param>
            <param name="workContext"></param>
            <param name="userService"></param>
            <param name="hierarchyDepartmentService"></param>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.SchoolsController.GetSchools(System.Int32,System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{cxPlatform.Client.ConexusBase.EntityStatusEnum},System.Collections.Generic.List{System.String},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Boolean,System.Int32,System.Int32,System.String,System.Web.OData.Query.ODataQueryOptions{cxOrganization.Client.Latest.Departments.SchoolDto})">
            <summary>
            get all schools
            </summary>
            <param name="parentDepartmentId"></param>
            <param name="queryOptions"></param>
            <param name="schoolIds"></param>
            <param name="statusEnums">School StatusEnums: Unknown = 0, Active = 1, Inactive = 2, Deactive = 3, All = 99, Default is Active</param>
            <param name="extIds">School ExtIds</param>
            <param name="lastUpdatedBefore"></param>
            <param name="lastUpdatedAfter"></param>
            <param name="orderBy"></param>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <param name="selectIdentity"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.SchoolsController.InsertSchool(cxOrganization.Client.Latest.Departments.SchoolDto)">
            <summary>
            Insert school
            </summary>
            <param name="schoolDto"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.SchoolsController.GetSchool(System.Int32)">
            <summary>
            get school by School Id 
            </summary>
            <param name="schoolId"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.SchoolsController.UpdateSchool(System.Int32,cxOrganization.Client.Latest.Departments.SchoolDto)">
            <summary>
            Update school by SchoolId
            </summary>
            <param name="schoolId"></param>
            <param name="school"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.SchoolsController.GetEmployeesInSchool(System.Int32,System.Collections.Generic.List{cxPlatform.Client.ConexusBase.EntityStatusEnum},System.Boolean,System.Int32,System.Int32,System.String,System.Web.OData.Query.ODataQueryOptions{cxOrganization.Client.Latest.Users.EmployeeDto})">
            <summary>
            get employees 
            </summary>
            <param name="schoolId"></param>
            <param name="statusEnums">employee status enums</param>
            <param name="queryOptions"></param>
            <param name="selectIdentity"></param>
            <param name="pageSize"></param>
            <param name="pageIndex"></param>
            <param name="orderBy"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.SchoolsController.GetEmployeeInSchool(System.Int32,System.Int32)">
            <summary>
            get employee
            </summary>
            <param name="schoolid"></param>
            <param name="employeeid"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.SchoolsController.GetLeanersInSchool(System.Int32,System.Collections.Generic.List{cxPlatform.Client.ConexusBase.EntityStatusEnum},System.Boolean,System.Int32,System.Int32,System.String,System.Web.OData.Query.ODataQueryOptions{cxOrganization.Client.Latest.Users.LearnerDto})">
            <summary>
            get learners
            </summary>
            <param name="schoolId"></param>
            <param name="statusEnums"></param>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <param name="orderBy"></param>
            <param name="selectIdentity"></param>
            <param name="queryOptions"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.SchoolsController.GetLeanerInSchool(System.Int32,System.Int32)">
            <summary>
            get learner
            </summary>
            <param name="schoolId"></param>
            <param name="learnerid"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:cxOrganization.WebServiceAPI.Controllers.SchoolsController.GetClassesOnSchool(System.Int32,System.Collections.Generic.List{cxPlatform.Client.ConexusBase.EntityStatusEnum},System.Int32,System.Int32,System.String,System.Boolean,System.Web.OData.Query.ODataQueryOptions{cxOrganization.Client.Latest.Departments.ClassDto})" -->
        <member name="M:cxOrganization.WebServiceAPI.Controllers.SchoolsController.GetClassOnSchool(System.Int32,System.Int32)">
            <summary>
            Get school's class
            </summary>
            <param name="schoolid"></param>
            <param name="classid"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.SchoolsController.GetSchoolSchoolowner(System.Int32)">
            <summary>
            Get school's Schoolowner
            </summary>
            <param name="schoolid"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.SchoolsController.InsertSchools(System.Int32,System.Collections.Generic.List{cxOrganization.Client.Latest.Departments.SchoolDto})">
            <summary>
            Insert schools
            </summary>
            <param name="schoolOwnerId"></param>
            <param name="schools"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.SchoolsController.GetSchoolOnSchoolOwner(System.Int32,System.Int32)">
            <summary>
            Get school by id
            </summary>
            <param name="schoolOwnerId"></param>
            <param name="schoolId"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.SchoolsController.GetSchoolsOnSchoolOwners(System.Int32)">
            <summary>
            Get schools
            </summary>
            <param name="schoolOwnerId"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.SchoolsController.UpdateSchoolOnSchoolOwner(System.Int32,System.Int32,cxOrganization.Client.Latest.Departments.SchoolDto)">
            <summary>
            Update school by given id
            </summary>
            <param name="schoolOwnerId"></param>
            <param name="schoolId"></param>
            <param name="school"></param>
            <returns></returns>
        </member>
        <member name="T:cxOrganization.WebServiceAPI.Controllers.TeachingGroupsController">
            <summary>
            Teaching group API 
            </summary>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.TeachingGroupsController.#ctor(cxOrganization.Domain.Services.ITeachingGroupMemberService,cxPlatform.Core.Context.IWorkContext,System.Func{System.String,cxOrganization.Domain.Services.IUserGroupService},System.Func{System.String,cxOrganization.Domain.Services.IUserService},cxOrganization.Domain.IOrganizationUnitOfWork)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.TeachingGroupsController.GetTeachingGroupsByParams(System.Int32,System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{cxPlatform.Client.ConexusBase.EntityStatusEnum},System.Collections.Generic.List{cxOrganization.Client.Latest.UserGroups.GrouptypeEnum},System.Collections.Generic.List{System.String},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Boolean,System.Int32,System.Int32,System.String,System.Web.OData.Query.ODataQueryOptions{cxOrganization.Client.Latest.UserGroups.TeachingGroupDto})">
            <summary>
            get all TeachingGroups
            </summary>
            <param name="teachingGroupIds"></param>
            <param name="userIds"></param>
            <param name="statusEnums"></param>
            <param name="extIds"></param>
            <param name="lastUpdatedBefore"></param>
            <param name="lastUpdatedAfter"></param>
            <param name="queryOptions"></param>
            <param name="parentDepartmentId">Parent department</param>
            <param name="groupTypes"></param>
            <param name="orderBy"></param>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <param name="selectIdentity"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.TeachingGroupsController.AddNewTeachingGroup(cxOrganization.Client.Latest.UserGroups.TeachingGroupDto)">
            <summary>
            Insert teaching group
            </summary>
            <param name="teachingGroup"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.TeachingGroupsController.GetTeachingGroupById(System.Int32)">
            <summary>
            get TeachingGroup
            </summary>
            <param name="teachinggroupId"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.TeachingGroupsController.UpdateTeachingGroupInfo(System.Int32,cxOrganization.Client.Latest.UserGroups.TeachingGroupDto)">
            <summary>
            Update teaching group
            </summary>
            <param name="teachinggroupid"></param>
            <param name="teachingGroup"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.TeachingGroupsController.GetTeachingGroupLearners(System.Int32,System.Collections.Generic.List{cxPlatform.Client.ConexusBase.EntityStatusEnum},System.Web.OData.Query.ODataQueryOptions{cxOrganization.Client.Latest.Users.LearnerDto})">
            <summary>
            Get Teaching group's learners
            </summary>
            <param name="teachinggroupid"></param>
            <param name="queryOptions"></param>
            <param name="statusEnums">Learner status enums</param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.TeachingGroupsController.GetTeachingGroupLearner(System.Int32,System.Int32)">
            <summary>
            Get Teaching Group's learner by identifier
            </summary>
            <param name="teachinggroupid"></param>
            <param name="learnerid"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.TeachingGroupsController.GetTeachingGroupMembership(System.Int32)">
            <summary>
            Get teaching group membership
            </summary>
            <param name="teachinggroupid"></param>
            <returns>list of teaching group levels</returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.TeachingGroupsController.UpdateTeachingGroupsLevel(System.Int32,cxOrganization.Client.Latest.MemberDto)">
            <summary>
            Add level to teaching group
            </summary>
            <param name="teachinggroupid"></param>
            <param name="levelDto"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.TeachingGroupsController.RemoveTeachingGroupsLevel(System.Int32,cxOrganization.Client.Latest.MemberDto)">
            <summary>
            remove teaching group's level
            </summary>
            <param name="teachinggroupid"></param>
            <param name="levelDto"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.TeachingGroupsController.InsertTeachingGroup(System.Int32,System.Int32,cxOrganization.Client.Latest.UserGroups.TeachingGroupDto)">
            <summary>
            Create group (This endpoint is obsolete)
            </summary>
            <param name="schoolownerid"></param>
            <param name="schoolid"></param>
            <param name="teachingGroup"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.TeachingGroupsController.UpdateTeachingGroup(System.Int32,System.Int32,System.Int32,cxOrganization.Client.Latest.UserGroups.TeachingGroupDto)">
             <summary>
             Create group (This endpoint is obsolete)
             </summary>
             <param name="schoolownerid"></param>
             <param name="schoolid"></param>
             <param name="teachingGroup"></param>
            <param name="teachinggroupid"></param>
             <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.TeachingGroupsController.GetTeachingGroup(System.Int32,System.Int32,System.Int32)">
             <summary>
             Get group (This endpoint is obsolete)
             </summary>
             <param name="schoolownerid"></param>
             <param name="schoolid"></param>
            <param name="teachinggroupid"></param>
             <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.TeachingGroupsController.GetTeachingGroups(System.Int32,System.Int32)">
            <summary>
            Get groups (This endpoint is obsolete)
            </summary>
            <param name="schoolownerid"></param>
            <param name="schoolid"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.TeachingGroupsController.DeleteTeachingGroup(System.Int32,System.Int32,System.Int32)">
            <summary>
            Get groups (This endpoint is obsolete)
            </summary>
            <param name="schoolownerid"></param>
            <param name="schoolid"></param>
            <param name="teachinggroupid"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.TeachingGroupsController.AddMembers(System.Int32,System.Int32,System.Int32,cxOrganization.Client.Latest.MemberDto)">
            <summary>
            Get group member (This endpoint is obsolete)
            </summary>
            <param name="schoolownerid"></param>
            <param name="schoolid"></param>
            <param name="teachinggroupid"></param>
            <param name="memberDto"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.TeachingGroupsController.GetMembers(System.Int32,System.Int32,System.Int32)">
            <summary>
            Get group member (This endpoint is obsolete)
            </summary>
            <param name="schoolownerid"></param>
            <param name="schoolid"></param>
            <param name="teachinggroupid"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.TeachingGroupsController.GetMember(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Get group member (This endpoint is obsolete)
            </summary>
            <param name="schoolownerid"></param>
            <param name="schoolid"></param>
            <param name="teachinggroupid"></param>
            <param name="memberid"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.TeachingGroupsController.GetMemberships(System.Int32,System.Int32,System.Int32)">
            <summary>
            Get group membership (This endpoint is obsolete)
            </summary>
            <param name="schoolownerid"></param>
            <param name="schoolid"></param>
            <param name="teachinggroupid"></param>
            <returns></returns>
        </member>
        <member name="T:cxOrganization.WebServiceAPI.Controllers.UserGroupsController">
            <summary>
            UserGroups controller
            </summary>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.UserGroupsController.#ctor(cxOrganization.Domain.Services.IUserGroupService,cxPlatform.Core.Context.IWorkContext,cxOrganization.Domain.Services.IUserGroupTypeService,cxOrganization.Domain.Services.IUserService,cxOrganization.Domain.Services.IDepartmentService)">
            <summary>
            Setup controller
            </summary>
            <param name="userGroupService"></param>
            <param name="workContext"></param>
            <param name="departmentService"></param>
            <param name="userGroupTypeService"></param>
            <param name="userService"></param>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.UserGroupsController.GetUserGroupsWithoutFilterCxToken(System.Int32,System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{cxPlatform.Client.ConexusBase.EntityStatusEnum},System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.String},System.Collections.Generic.List{cxOrganization.Client.Latest.UserGroups.GrouptypeEnum},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Int32,System.Int32,System.String,System.Web.OData.Query.ODataQueryOptions{cxPlatform.Client.ConexusBase.Latest.IdentityStatusDto})">
            <summary>
            Ge tUserGroups Without Filtering CxToken
            </summary>
            <param name="ownerId"></param>
            <param name="customerIds"></param>
            <param name="departmentIds"></param>
            <param name="userGroupStatusEnums"></param>
            <param name="userGroupArchetypeIds"></param>
            <param name="userIds"></param>
            <param name="userGroupIds"></param>
            <param name="extIds"></param>
            <param name="groupTypes"></param>
            <param name="lastUpdatedBefore"></param>
            <param name="lastUpdatedAfter"></param>
            <param name="queryOptions"></param>
            <param name="orderBy"></param>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.UserGroupsController.GetUserGroupWithoutFilterCxToken(System.Int32,System.Int32)">
            <summary>
            Get UserGroup Without Filtering CxToken
            </summary>
            <param name="ownerId"></param>
            <param name="userGroupId"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.UserGroupsController.GetUserGroupTypeUGWithoutFilterCxToken(System.Int32,System.Int32)">
            <summary>
            Get user group by user group and owner id without filtering CXToken
            </summary>
            <param name="ownerId"></param>
            <param name="userGroupId"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.UserGroupsController.GetUsersInUserGroupWithoutFilterCxToken(System.Int32,System.Int32,System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{cxPlatform.Client.ConexusBase.EntityStatusEnum},System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Int32,System.Int32,System.String,System.Web.OData.Query.ODataQueryOptions{cxPlatform.Client.ConexusBase.Latest.IdentityStatusDto})">
            <summary>
            Get Users In UserGroup Without Filtering CxToken
            </summary>
            <param name="ownerId"></param>
            <param name="userGroupId"></param>
            <param name="customerIds"></param>
            <param name="parentDepartmentIds"></param>
            <param name="userStatusEnums"></param>
            <param name="userArchetypeIds"></param>
            <param name="userIds"></param>
            <param name="ssnList"></param>
            <param name="extIds"></param>
            <param name="lastUpdatedBefore"></param>
            <param name="lastUpdatedAfter"></param>
            <param name="queryOptions"></param>
            <param name="orderBy"></param>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <param name="userNames"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.UserGroupsController.GetUserInUserGroupWithoutFilterCxToken(System.Int32,System.Int32,System.Int32)">
            <summary>
            Get user in usergroup without filtering CxToken
            </summary>
            <param name="ownerId"></param>
            <param name="userGroupId"></param>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.UserGroupsController.GetUserGroupDepartmentWithoutFilterCxToken(System.Int32,System.Int32)">
            <summary>
            Get user group department without filtering Cxtoken
            </summary>
            <param name="ownerId"></param>
            <param name="userGroupId"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.UserGroupsController.GetUserIdentityStatusByExtId(System.String)">
            <summary>
            Get usergroup by extid
            </summary>
            <param name="usergroupextid"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.UserGroupsController.GetListUserIdentityStatusByExtId(System.Int32,System.String)">
            <summary>
            Get list user group by extid
            </summary>
            <param name="usergroupextid"></param>
            <param name="ownerid"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.UserGroupsController.GetUserGroupIdentityStatusById(System.Int32)">
            <summary>
            Get user group by id
            </summary>
            <param name="usergroupid"></param>
            <returns></returns>
        </member>
        <member name="T:cxOrganization.WebServiceAPI.Controllers.UsersController">
            <summary>
            Legacy controller to operate directly on users. Should use archetype controllers (Learner/Employee) instead if possible
            </summary>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.UsersController.#ctor(System.Func{System.String,cxPlatform.Core.IUnitOfWork},cxOrganization.Domain.IOrganizationUnitOfWork,cxOrganization.Domain.Services.IUserService,cxPlatform.Core.Context.IWorkContext,cxPlatform.Data.Property.IPropertyService,cxPlatform.Data.Logging.ILoggingService,cxOrganization.Domain.Services.IUserTypeService,cxOrganization.Domain.Services.IUserGroupService,cxOrganization.Domain.Services.IDepartmentService,cxOrganization.Domain.Services.IOwnerService,cxOrganization.Domain.Services.ICustomerService,cxOrganization.Domain.Services.ILoginServiceUserService)">
            <summary>
            Setup controller
            </summary>
            <param name="unitOfWork"></param>
            <param name="organizationUnitOfWork"></param>
            <param name="userService"></param>
            <param name="workContext"></param>
            <param name="propertyService"></param>
            <param name="loggingService"></param>
            <param name="userTypeService"></param>
            <param name="userGroupService"></param>
            <param name="departmentService"></param>
            <param name="ownerService"></param>
            <param name="customerService"></param>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.UsersController.GetUsers(System.Int32,System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{cxPlatform.Client.ConexusBase.EntityStatusEnum},System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Boolean},System.String,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.Int32},System.Int32,System.Int32,System.String,System.Web.OData.Query.ODataQueryOptions{cxPlatform.Client.ConexusBase.Latest.IdentityStatusDto})">
            <summary>
            Get users
            </summary>
            <param name="ownerId"></param>
            <param name="customerIds"></param>
            <param name="userNames"></param>
            <param name="parentDepartmentIds"></param>
            <param name="userStatusEnums">Default is Active</param>
            <param name="archetypeIds"></param>
            <param name="lastUpdatedBefore"></param>
            <param name="lastUpdatedAfter"></param>
            <param name="userIds"></param>
            <param name="ssnList"></param>
            <param name="extIds"></param>
            <param name="userGroupIds"></param>
            <param name="queryOptions"></param>
            <param name="getDynamicProperties"></param>
            <param name="orderBy"></param>
            <param name="ssn"></param>
            <param name="loginServiceIds"></param>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <param name="loginServiceClaims"></param>
            <param name="loginServiceClaimTypes"></param>
            <returns></returns>
            <response code="200">Returns list User's IdentityStatusDto</response>
            <response code="400">No content</response>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.UsersController.GetUsersBelongToOwnerId(System.Int32,System.Int32)">
            <summary>
            Get user belong to Owner
            </summary>
            <param name="ownerid"></param>
            <param name="userid"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.UsersController.GetUserGroupsUser(System.Int32,System.Int32,System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{cxPlatform.Client.ConexusBase.EntityStatusEnum},System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.String},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Int32,System.Int32,System.String,System.Web.OData.Query.ODataQueryOptions{cxPlatform.Client.ConexusBase.Latest.IdentityStatusDto})">
            <summary>
            Get UserGroups User
            </summary>
            <param name="ownerid"></param>
            <param name="userid"></param>
            <param name="customerIds"></param>
            <param name="departmentIds"></param>
            <param name="userGroupStatusEnums"></param>
            <param name="userGroupIds"></param>
            <param name="archetypeIds"></param>
            <param name="extIds"></param>
            <param name="lastUpdatedBefore"></param>
            <param name="lastUpdatedAfter"></param>
            <param name="queryOptions"></param>
            <param name="orderBy"></param>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.UsersController.GetUserGroupUser(System.Int32,System.Int32,System.Int32)">
            <summary>
            Get usergroup of user
            </summary>
            <param name="ownerId"></param>
            <param name="userId"></param>
            <param name="userGroupId"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.UsersController.GetUserDepartments(System.Int32,System.Int32,System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{cxPlatform.Client.ConexusBase.EntityStatusEnum},System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.String},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Int32,System.Int32,System.String,System.Web.OData.Query.ODataQueryOptions{cxPlatform.Client.ConexusBase.Latest.IdentityStatusDto})">
            <summary>
            Get Department IdentityStatusDto of User
            </summary>
            <param name="ownerId"></param>
            <param name="userId"></param>
            <param name="customerIds"></param>
            <param name="departmentIds"></param>
            <param name="userGroupIds"></param>
            <param name="departmentStatusEnums"></param>
            <param name="archetypeIds"></param>
            <param name="extIds"></param>
            <param name="lastUpdatedBefore"></param>
            <param name="lastUpdatedAfter"></param>
            <param name="queryOptions"></param>
            <param name="pageSize"></param>
            <param name="pageIndex"></param>
            <param name="orderBy"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.UsersController.GetUserDepartment(System.Int32,System.Int32,System.Int32)">
            <summary>
            Get Department IdentityStatusDto of User
            </summary>
            <param name="ownerId"></param>
            <param name="userId"></param>
            <param name="departmentId"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.UsersController.GetUserTypesUser(System.Int32,System.Int32,System.Collections.Generic.List{cxPlatform.Client.ConexusBase.ArchetypeEnum},System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.String},System.Web.OData.Query.ODataQueryOptions{cxPlatform.Client.ConexusBase.Latest.IdentityStatusDto})">
            <summary>
            Get Usertypes of user
            </summary>
            <param name="ownerId"></param>
            <param name="userId"></param>
            <param name="userTypeArchetypeIds"></param>
            <param name="userTypeIds"></param>
            <param name="extIds"></param>
            <param name="queryOptions"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.UsersController.GetUserTypeUser(System.Int32,System.Int32,System.Int32)">
            <summary>
            Get Usertype of user
            </summary>
            <param name="ownerId"></param>
            <param name="userId"></param>
            <param name="userTypeId"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.UsersController.UpdateUser(cxOrganization.Client.Latest.Account.UserDto)">
            <summary>
            Updates user
            </summary>
            <param name="userDto"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.UsersController.ResetPassword(System.String)">
            <summary>
            Reset password of users
            </summary>
            <param name="userName"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.UsersController.ChangePassword(System.String,cxOrganization.Client.Latest.Account.ChangePasswordRequestDto)">
            <summary>
            Change password of users
            </summary>
            <param name="userName"></param>
            <param name="changePasswordDto"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.UsersController.GetUserByUserName(System.String)">
            <summary>
            Get user by name
            </summary>
            <param name="userName"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.UsersController.GetUserById(System.Int32)">
            <summary>
            Get user by id
            </summary>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.UsersController.PatchUserById(System.Int32,cxOrganization.Client.Latest.Account.UserDto)">
            <summary>
            Patch user
            </summary>
            <param name="userId"></param>
            <param name="userDto"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.UsersController.Logon(cxOrganization.Client.Latest.Account.LogonRequestDto)">
            <summary>
            Logon user
            </summary>
            <param name="logonRequestDto"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.UsersController.GetHierarchyDepartmentByUserId(System.Int32)">
            <summary>
            Get list hierarchy department by user
            </summary>
            <param name="userid"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.UsersController.GetHierarchyDepartmentByUserExtId(System.String)">
            <summary>
            Get list hierarchy department by user
            </summary>
            <param name="userextid"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.UsersController.GetHierarchyDepartmentByUserSsn(System.String)">
            <summary>
            Get list hierarchy department by user
            </summary>
            <param name="userssn"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.UsersController.GetHierarchyDepartmentsByUserSsnWithoutFilterCXToken(System.Int32,System.String)">
            <summary>
            Get list hierarchy department by user
            </summary>
            <param name="ownerid"></param>
            <param name="userssn"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.UsersController.GetUserIdentityStatusByExtId(System.String)">
            <summary>
            Get user by extid
            </summary>
            <param name="userextid"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.UsersController.GetUserIdentityStatusBySsn(System.String)">
            <summary>
            Get user by extid
            </summary>
            <param name="ssn"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.UsersController.GetUserIdentityStatusById(System.Int32)">
            <summary>
            Get user by id
            </summary>
            <param name="userid"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.UsersController.GetUserIdentityStatusByIdWitoutCxToken(System.Int32,System.Int32)">
            <summary>
            Get user by id
            </summary>
            <param name="ownerid"></param>
            <param name="userid"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.UsersController.GetHierarchyDepartmentsByUserId(System.Int32,System.Int32)">
            <summary>
            Get list hierarchy department by user
            </summary>
            <param name="ownerid"></param>
            <param name="userid"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.UsersController.GetUserByObjectMappings(System.Collections.Generic.List{System.Int32})">
            <summary>
            Get user by id
            </summary>
            <param name="userIds"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.UsersController.InsertLoginServiceClaim(cxOrganization.Client.Latest.Users.LoginServiceUserDto)">
            <summary>
            Insert loginServiceUser that contains claim value for a user in a login service.
            </summary>
            <param name="loginServiceUser"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.UsersController.UpdateLoginServiceClaim(cxOrganization.Client.Latest.Users.LoginServiceUserDto)">
            <summary>
            Update loginServiceUser that contains claim value for a user in a login service.
            </summary>
            <param name="loginServiceUser"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.UsersController.DeleteLoginServiceClaim(cxOrganization.Client.Latest.Users.LoginServiceUserDto)">
            <summary>
            Delete loginServiceUser that contains claim value for a user in a login service.
            </summary>
            <param name="loginServiceUser"></param>
            <returns></returns>
        </member>
        <member name="M:cxOrganization.WebServiceAPI.Controllers.UsersController.GetLoginServiceClaims(System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.String},System.Collections.Generic.List{cxPlatform.Client.ConexusBase.ArchetypeEnum},System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.String},System.Collections.Generic.List{cxPlatform.Client.ConexusBase.EntityStatusEnum},System.Collections.Generic.List{System.Int32},System.Nullable{System.Boolean},System.Collections.Generic.List{System.String},System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Get list of loginServiceUser of user based on given parameters
            </summary>
            <returns></returns>
        </member>
        <member name="T:cxPlatform.ManagementAPI.Controllers.ManagementController">
            <summary>
            Provides functionality to manage application
            </summary>
        </member>
        <member name="M:cxPlatform.ManagementAPI.Controllers.ManagementController.#ctor(cxPlatform.Core.IDatabaseConfiguration,System.Func{System.String,cxPlatform.Crosscutting.Caching.ICacheProvider},cxPlatform.Core.EFCache.IEntityFrameworkCache,cxPlatform.Core.IUnitOfWork)">
            <summary>
            Controller for management API
            </summary>
            <param name="databaseConfiguration"></param>
            <param name="cacheProvider"></param>
            <param name="readOnlyDataMemoryCache"></param>
            <param name="applicationService"></param>
            <param name="entityFrameworkCache"></param>
            <param name="unitOfWork"></param>
        </member>
        <member name="M:cxPlatform.ManagementAPI.Controllers.ManagementController.GetAppsettings">
            <summary>
            Gets application config
            </summary>
            <returns></returns>
        </member>
        <member name="M:cxPlatform.ManagementAPI.Controllers.ManagementController.GetDatabaseInfo">
            <summary>
            Get database info
            </summary>
            <returns></returns>
        </member>
        <member name="M:cxPlatform.ManagementAPI.Controllers.ManagementController.ClearAllCache">
            <summary>
            Clear the all cache
            </summary>
            <returns></returns>
        </member>
        <member name="M:cxPlatform.ManagementAPI.Controllers.ManagementController.ClearAllMemoryCache">
            <summary>
            Clear memory cache
            </summary>
            <returns></returns>
        </member>
        <member name="T:cxPlatform.ManagementAPI.Controllers.MonitorController">
            <summary>
            Monitors state of application
            </summary>
        </member>
        <member name="M:cxPlatform.ManagementAPI.Controllers.MonitorController.GetVersion">
            <summary>
            Get version of deployed app
            </summary>
            <returns></returns>
        </member>
        <member name="M:cxPlatform.ManagementAPI.Controllers.MonitorController.GetAll">
            <summary>
            Get status of application
            </summary>
            <returns></returns>
        </member>
        <member name="M:cxPlatform.ManagementAPI.Controllers.MonitorController.GetDb">
            <summary>
            Get status of database connection
            </summary>
            <returns></returns>
        </member>
        <member name="M:cxPlatform.ManagementAPI.Controllers.MonitorController.GetCache">
            <summary>
            Get status on distributed cache
            </summary>
            <returns></returns>
        </member>
    </members>
</doc>
