// @ts-check
const fs = require('fs');
const path = require('path');
const manifest = require(path.resolve(__dirname, '..', '..', 'angular.manifest.json'));
const warningMessage = `// PLEASE DON'T COMMIT THIS FILE. CODE IS AUTOMATICALLY GENERATED BY THE WEBPACK.`;

function patchEntryPoint(mainEntryFile, content) {
  fs.writeFileSync(mainEntryFile, content);
}

/**
 * This is where you define a function that modifies your webpack config
 */
module.exports = (config, options) => {
  let mainEntryFile = '';
  const { path: directory, ngmodule, name } = options;

  if (!directory) {
    throw new Error('Please provide --path parameter. E.g., ./path/to/entry/folder');
  }

  if (!name) {
    throw new Error('Please provide --name parameter. E.g., opal20.appshell');
  }

  delete config.entry.polyfills;
  delete config.entry['polyfills-es5'];
  delete config.optimization.runtimeChunk;
  delete config.optimization.splitChunks;
  delete config.entry.styles;

  // Patch core external libraries.
  config.externals = [manifest.coreDependencies];
  const deps = manifest.modules[name.split('.')[1]].dependencies;

  if (deps) {
    for (const dep of deps) {
      const depName = `@opal20/${dep}`;

      config.externals[0][depName] = depName;
      config.externals.push((context, request, callback) => {
        if (request.indexOf(dep) > -1) {
          return callback(null, depName);
        }
        callback();
      });
    }
  }

  // Patch entry module for Angular Compiler Plugin.
  const [moduleFile, moduleName] = ngmodule && ngmodule.split('#');
  const ngCompilerPluginInstance = config.plugins.find(x => x.constructor && x.constructor.name === 'AngularCompilerPlugin');
  if (ngCompilerPluginInstance) {
    ngCompilerPluginInstance._entryModule = !moduleFile ? directory : `${directory}/${moduleFile}`;
  }

  // Preserve path to entry point.
  mainEntryFile = config.entry.main[0];

  let mainContent = `export * from '${directory}';
export * from '${directory}/${directory.replace('@', '').replace('/', '-')}.ngfactory';`;

  if (ngmodule) {
    const factoryFile = `${directory}/${moduleFile}.ngfactory`;

    mainContent = `${warningMessage}
export * from '${directory}/${moduleFile}';
export * from '${factoryFile}';
import { ${moduleName}NgFactory } from '${factoryFile}';
export default ${moduleName}NgFactory;
`;
  }

  patchEntryPoint(mainEntryFile, mainContent);

  config.output.filename = `${name}.js`;
  config.output.library = name;
  config.output.libraryTarget = 'umd';
  config.output.globalObject = `(typeof self !== 'undefined' ? self : this)`;

  config.plugins.push({
    apply: compiler =>
      compiler.hooks.afterEmit.tap('AfterEmitPlugin', compilation =>
        patchEntryPoint(
          mainEntryFile,
          `${warningMessage}
`
        )
      )
  });

  return config;
};
